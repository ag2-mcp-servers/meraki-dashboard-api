# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T05:04:12+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Path, Query

from models import (
    Band,
    DevicesSerialCameraAnalyticsLiveGetResponse,
    DevicesSerialCameraAnalyticsOverviewGetResponse,
    DevicesSerialCameraAnalyticsRecentGetResponse,
    DevicesSerialCameraAnalyticsZonesGetResponse,
    DevicesSerialCameraAnalyticsZonesZoneIdHistoryGetResponse,
    DevicesSerialCameraQualityAndRetentionSettingsGetResponse,
    DevicesSerialCameraQualityAndRetentionSettingsPutRequest,
    DevicesSerialCameraQualityAndRetentionSettingsPutResponse,
    DevicesSerialCameraVideoSettingsGetResponse,
    DevicesSerialCameraVideoSettingsPutRequest,
    DevicesSerialCameraVideoSettingsPutResponse,
    DevicesSerialCellularGatewaySettingsGetResponse,
    DevicesSerialCellularGatewaySettingsPortForwardingRulesGetResponse,
    DevicesSerialCellularGatewaySettingsPortForwardingRulesPutRequest,
    DevicesSerialCellularGatewaySettingsPortForwardingRulesPutResponse,
    DevicesSerialCellularGatewaySettingsPutRequest,
    DevicesSerialCellularGatewaySettingsPutResponse,
    DevicesSerialClientsGetResponse,
    DevicesSerialSwitchPortsCyclePostRequest,
    DevicesSerialSwitchPortsCyclePostResponse,
    DevicesSerialSwitchPortStatusesGetResponse,
    DevicesSerialSwitchPortStatusesPacketsGetResponse,
    DevicesSerialWirelessBluetoothSettingsPutRequest,
    DevicesSerialWirelessBluetoothSettingsPutResponse,
    DeviceType,
    ExcludedEventTypes,
    IncludedEventTypes,
    NetworksNetworkIdAccessPoliciesGetResponse,
    NetworksNetworkIdAirMarshalGetResponse,
    NetworksNetworkIdAlertSettingsGetResponse,
    NetworksNetworkIdAlertSettingsPutRequest,
    NetworksNetworkIdAlertSettingsPutResponse,
    NetworksNetworkIdApplianceFirewallInboundFirewallRulesGetResponse,
    NetworksNetworkIdApplianceFirewallInboundFirewallRulesPutRequest,
    NetworksNetworkIdApplianceFirewallInboundFirewallRulesPutResponse,
    NetworksNetworkIdAppliancePortsAppliancePortIdGetResponse,
    NetworksNetworkIdAppliancePortsAppliancePortIdPutRequest,
    NetworksNetworkIdAppliancePortsAppliancePortIdPutResponse,
    NetworksNetworkIdAppliancePortsGetResponse,
    NetworksNetworkIdBindPostRequest,
    NetworksNetworkIdBluetoothClientsBluetoothClientIdGetResponse,
    NetworksNetworkIdBluetoothClientsGetResponse,
    NetworksNetworkIdBluetoothSettingsGetResponse,
    NetworksNetworkIdBluetoothSettingsPutRequest,
    NetworksNetworkIdBluetoothSettingsPutResponse,
    NetworksNetworkIdCameraQualityRetentionProfilesGetResponse,
    NetworksNetworkIdCameraQualityRetentionProfilesPostRequest,
    NetworksNetworkIdCameraQualityRetentionProfilesPostResponse,
    NetworksNetworkIdCameraQualityRetentionProfilesQualityRetentionProfileIdGetResponse,
    NetworksNetworkIdCameraQualityRetentionProfilesQualityRetentionProfileIdPutRequest,
    NetworksNetworkIdCameraQualityRetentionProfilesQualityRetentionProfileIdPutResponse,
    NetworksNetworkIdCameraSchedulesGetResponse,
    NetworksNetworkIdCamerasSerialSnapshotPostRequest,
    NetworksNetworkIdCamerasSerialSnapshotPostResponse,
    NetworksNetworkIdCamerasSerialVideoLinkGetResponse,
    NetworksNetworkIdCellularFirewallRulesGetResponse,
    NetworksNetworkIdCellularFirewallRulesPutRequest,
    NetworksNetworkIdCellularFirewallRulesPutResponse,
    NetworksNetworkIdClientsClientIdConnectionStatsGetResponse,
    NetworksNetworkIdClientsClientIdEventsGetResponse,
    NetworksNetworkIdClientsClientIdGetResponse,
    NetworksNetworkIdClientsClientIdLatencyHistoryGetResponse,
    NetworksNetworkIdClientsClientIdLatencyStatsGetResponse,
    NetworksNetworkIdClientsClientIdPolicyGetResponse,
    NetworksNetworkIdClientsClientIdPolicyPutRequest,
    NetworksNetworkIdClientsClientIdPolicyPutResponse,
    NetworksNetworkIdClientsClientIdSplashAuthorizationStatusGetResponse,
    NetworksNetworkIdClientsClientIdSplashAuthorizationStatusPutRequest,
    NetworksNetworkIdClientsClientIdSplashAuthorizationStatusPutResponse,
    NetworksNetworkIdClientsClientIdUsageHistoryGetResponse,
    NetworksNetworkIdClientsConnectionStatsGetResponse,
    NetworksNetworkIdClientsGetResponse,
    NetworksNetworkIdClientsLatencyStatsGetResponse,
    NetworksNetworkIdClientsProvisionPostRequest,
    NetworksNetworkIdClientsProvisionPostResponse,
    NetworksNetworkIdConnectionStatsGetResponse,
    NetworksNetworkIdContentFilteringCategoriesGetResponse,
    NetworksNetworkIdContentFilteringGetResponse,
    NetworksNetworkIdContentFilteringPutRequest,
    NetworksNetworkIdContentFilteringPutResponse,
    NetworksNetworkIdDevicesClaimPostRequest,
    NetworksNetworkIdDevicesConnectionStatsGetResponse,
    NetworksNetworkIdDevicesGetResponse,
    NetworksNetworkIdDevicesLatencyStatsGetResponse,
    NetworksNetworkIdDevicesSerialConnectionStatsGetResponse,
    NetworksNetworkIdDevicesSerialGetResponse,
    NetworksNetworkIdDevicesSerialLatencyStatsGetResponse,
    NetworksNetworkIdDevicesSerialLossAndLatencyHistoryGetResponse,
    NetworksNetworkIdDevicesSerialPerformanceGetResponse,
    NetworksNetworkIdDevicesSerialPutRequest,
    NetworksNetworkIdDevicesSerialPutResponse,
    NetworksNetworkIdDevicesSerialRebootPostResponse,
    NetworksNetworkIdDevicesSerialUplinkGetResponse,
    NetworksNetworkIdDevicesSerialWirelessStatusGetResponse,
    NetworksNetworkIdEventsEventTypesGetResponse,
    NetworksNetworkIdEventsGetResponse,
    NetworksNetworkIdFailedConnectionsGetResponse,
    NetworksNetworkIdFirewalledServicesGetResponse,
    NetworksNetworkIdFirewalledServicesServiceGetResponse,
    NetworksNetworkIdFirewalledServicesServicePutRequest,
    NetworksNetworkIdFirewalledServicesServicePutResponse,
    NetworksNetworkIdFloorPlansFloorPlanIdGetResponse,
    NetworksNetworkIdFloorPlansFloorPlanIdPutRequest,
    NetworksNetworkIdFloorPlansFloorPlanIdPutResponse,
    NetworksNetworkIdFloorPlansGetResponse,
    NetworksNetworkIdFloorPlansPostRequest,
    NetworksNetworkIdFloorPlansPostResponse,
    NetworksNetworkIdGetResponse,
    NetworksNetworkIdL3FirewallRulesGetResponse,
    NetworksNetworkIdL3FirewallRulesPutRequest,
    NetworksNetworkIdL3FirewallRulesPutResponse,
    NetworksNetworkIdL7FirewallRulesApplicationCategoriesGetResponse,
    NetworksNetworkIdL7FirewallRulesGetResponse,
    NetworksNetworkIdL7FirewallRulesPutRequest,
    NetworksNetworkIdL7FirewallRulesPutResponse,
    NetworksNetworkIdLatencyStatsGetResponse,
    NetworksNetworkIdMerakiAuthUsersGetResponse,
    NetworksNetworkIdMerakiAuthUsersMerakiAuthUserIdGetResponse,
    NetworksNetworkIdOneToManyNatRulesGetResponse,
    NetworksNetworkIdOneToManyNatRulesPutRequest,
    NetworksNetworkIdOneToManyNatRulesPutResponse,
    NetworksNetworkIdOneToOneNatRulesGetResponse,
    NetworksNetworkIdOneToOneNatRulesPutRequest,
    NetworksNetworkIdOneToOneNatRulesPutResponse,
    NetworksNetworkIdPiiPiiKeysGetResponse,
    NetworksNetworkIdPiiRequestsGetResponse,
    NetworksNetworkIdPiiRequestsPostRequest,
    NetworksNetworkIdPiiRequestsPostResponse,
    NetworksNetworkIdPiiRequestsRequestIdGetResponse,
    NetworksNetworkIdPiiSmDevicesForKeyGetResponse,
    NetworksNetworkIdPiiSmOwnersForKeyGetResponse,
    NetworksNetworkIdPortForwardingRulesGetResponse,
    NetworksNetworkIdPortForwardingRulesPutRequest,
    NetworksNetworkIdPortForwardingRulesPutResponse,
    NetworksNetworkIdPutRequest,
    NetworksNetworkIdPutResponse,
    NetworksNetworkIdSecurityEventsGetResponse,
    NetworksNetworkIdSecurityIntrusionSettingsGetResponse,
    NetworksNetworkIdSecurityIntrusionSettingsPutRequest,
    NetworksNetworkIdSecurityIntrusionSettingsPutResponse,
    NetworksNetworkIdSecurityMalwareSettingsGetResponse,
    NetworksNetworkIdSecurityMalwareSettingsPutRequest,
    NetworksNetworkIdSecurityMalwareSettingsPutResponse,
    NetworksNetworkIdSiteToSiteVpnGetResponse,
    NetworksNetworkIdSiteToSiteVpnPutRequest,
    NetworksNetworkIdSiteToSiteVpnPutResponse,
    NetworksNetworkIdSmBypassActivationLockAttemptsAttemptIdGetResponse,
    NetworksNetworkIdSmBypassActivationLockAttemptsPostRequest,
    NetworksNetworkIdSmBypassActivationLockAttemptsPostResponse,
    NetworksNetworkIdSmDeviceFieldsPutRequest,
    NetworksNetworkIdSmDeviceFieldsPutResponse,
    NetworksNetworkIdSmDeviceIdCellularUsageHistoryGetResponse,
    NetworksNetworkIdSmDeviceIdCertsGetResponse,
    NetworksNetworkIdSmDeviceIdDeviceProfilesGetResponse,
    NetworksNetworkIdSmDeviceIdNetworkAdaptersGetResponse,
    NetworksNetworkIdSmDeviceIdRestrictionsGetResponse,
    NetworksNetworkIdSmDeviceIdSecurityCentersGetResponse,
    NetworksNetworkIdSmDeviceIdSoftwaresGetResponse,
    NetworksNetworkIdSmDeviceIdWlanListsGetResponse,
    NetworksNetworkIdSmDevicesCheckinPutRequest,
    NetworksNetworkIdSmDevicesCheckinPutResponse,
    NetworksNetworkIdSmDevicesDeviceIdUnenrollPostResponse,
    NetworksNetworkIdSmDevicesGetResponse,
    NetworksNetworkIdSmDevicesLockPutRequest,
    NetworksNetworkIdSmDevicesLockPutResponse,
    NetworksNetworkIdSmDevicesTagsPutRequest,
    NetworksNetworkIdSmDevicesTagsPutResponse,
    NetworksNetworkIdSmDeviceWipePutRequest,
    NetworksNetworkIdSmDeviceWipePutResponse,
    NetworksNetworkIdSmIdConnectivityGetResponse,
    NetworksNetworkIdSmIdDesktopLogsGetResponse,
    NetworksNetworkIdSmIdDeviceCommandLogsGetResponse,
    NetworksNetworkIdSmIdPerformanceHistoryGetResponse,
    NetworksNetworkIdSmProfilesGetResponse,
    NetworksNetworkIdSmTargetGroupsGetResponse,
    NetworksNetworkIdSmTargetGroupsPostRequest,
    NetworksNetworkIdSmTargetGroupsPostResponse,
    NetworksNetworkIdSmTargetGroupsTargetGroupIdGetResponse,
    NetworksNetworkIdSmTargetGroupsTargetGroupIdPutRequest,
    NetworksNetworkIdSmTargetGroupsTargetGroupIdPutResponse,
    NetworksNetworkIdSmUsersGetResponse,
    NetworksNetworkIdSmUserUserIdDeviceProfilesGetResponse,
    NetworksNetworkIdSmUserUserIdSoftwaresGetResponse,
    NetworksNetworkIdSnmpSettingsGetResponse,
    NetworksNetworkIdSplashLoginAttemptsGetResponse,
    NetworksNetworkIdSplitPostResponse,
    NetworksNetworkIdSsidsGetResponse,
    NetworksNetworkIdSsidsNumberGetResponse,
    NetworksNetworkIdSsidsNumberL3FirewallRulesGetResponse,
    NetworksNetworkIdSsidsNumberL3FirewallRulesPutRequest,
    NetworksNetworkIdSsidsNumberL3FirewallRulesPutResponse,
    NetworksNetworkIdSsidsNumberPutRequest,
    NetworksNetworkIdSsidsNumberPutResponse,
    NetworksNetworkIdSsidsNumberSplashSettingsGetResponse,
    NetworksNetworkIdSsidsNumberSplashSettingsPutRequest,
    NetworksNetworkIdSsidsNumberSplashSettingsPutResponse,
    NetworksNetworkIdStaticRoutesGetResponse,
    NetworksNetworkIdStaticRoutesPostRequest,
    NetworksNetworkIdStaticRoutesPostResponse,
    NetworksNetworkIdStaticRoutesStaticRouteIdGetResponse,
    NetworksNetworkIdStaticRoutesStaticRouteIdPutRequest,
    NetworksNetworkIdStaticRoutesStaticRouteIdPutResponse,
    NetworksNetworkIdSwapWarmSparePostResponse,
    NetworksNetworkIdSwitchLinkAggregationsGetResponse,
    NetworksNetworkIdSwitchLinkAggregationsLinkAggregationIdPutRequest,
    NetworksNetworkIdSwitchLinkAggregationsLinkAggregationIdPutResponse,
    NetworksNetworkIdSwitchLinkAggregationsPostRequest,
    NetworksNetworkIdSwitchLinkAggregationsPostResponse,
    NetworksNetworkIdSwitchPortSchedulesGetResponse,
    NetworksNetworkIdSwitchPortSchedulesPortScheduleIdPutRequest,
    NetworksNetworkIdSwitchPortSchedulesPortScheduleIdPutResponse,
    NetworksNetworkIdSwitchPortSchedulesPostRequest,
    NetworksNetworkIdSwitchPortSchedulesPostResponse,
    NetworksNetworkIdSwitchSettingsGetResponse,
    NetworksNetworkIdSwitchSettingsMtuGetResponse,
    NetworksNetworkIdSwitchSettingsMtuPutRequest,
    NetworksNetworkIdSwitchSettingsMtuPutResponse,
    NetworksNetworkIdSwitchSettingsMulticastGetResponse,
    NetworksNetworkIdSwitchSettingsMulticastPutRequest,
    NetworksNetworkIdSwitchSettingsMulticastPutResponse,
    NetworksNetworkIdSwitchSettingsPutRequest,
    NetworksNetworkIdSwitchSettingsPutResponse,
    NetworksNetworkIdSwitchSettingsQosRulesGetResponse,
    NetworksNetworkIdSwitchSettingsQosRulesOrderGetResponse,
    NetworksNetworkIdSwitchSettingsQosRulesOrderPutRequest,
    NetworksNetworkIdSwitchSettingsQosRulesOrderPutResponse,
    NetworksNetworkIdSwitchSettingsQosRulesPostRequest,
    NetworksNetworkIdSwitchSettingsQosRulesPostResponse,
    NetworksNetworkIdSwitchSettingsQosRulesQosRuleIdGetResponse,
    NetworksNetworkIdSwitchSettingsQosRulesQosRuleIdPutRequest,
    NetworksNetworkIdSwitchSettingsQosRulesQosRuleIdPutResponse,
    NetworksNetworkIdSwitchSettingsStormControlGetResponse,
    NetworksNetworkIdSwitchSettingsStormControlPutRequest,
    NetworksNetworkIdSwitchSettingsStormControlPutResponse,
    NetworksNetworkIdSwitchStacksGetResponse,
    NetworksNetworkIdSwitchStacksPostRequest,
    NetworksNetworkIdSwitchStacksPostResponse,
    NetworksNetworkIdSwitchStacksSwitchStackIdAddPostRequest,
    NetworksNetworkIdSwitchStacksSwitchStackIdAddPostResponse,
    NetworksNetworkIdSwitchStacksSwitchStackIdGetResponse,
    NetworksNetworkIdSwitchStacksSwitchStackIdRemovePostRequest,
    NetworksNetworkIdSwitchStacksSwitchStackIdRemovePostResponse,
    NetworksNetworkIdSyslogServersGetResponse,
    NetworksNetworkIdSyslogServersPutRequest,
    NetworksNetworkIdSyslogServersPutResponse,
    NetworksNetworkIdTrafficGetResponse,
    NetworksNetworkIdUplinkSettingsGetResponse,
    NetworksNetworkIdUplinkSettingsPutRequest,
    NetworksNetworkIdUplinkSettingsPutResponse,
    NetworksNetworkIdVlansEnabledStateGetResponse,
    NetworksNetworkIdVlansEnabledStatePutRequest,
    NetworksNetworkIdVlansEnabledStatePutResponse,
    NetworksNetworkIdVlansGetResponse,
    NetworksNetworkIdVlansPostRequest,
    NetworksNetworkIdVlansPostResponse,
    NetworksNetworkIdVlansVlanIdGetResponse,
    NetworksNetworkIdVlansVlanIdPutRequest,
    NetworksNetworkIdVlansVlanIdPutResponse,
    NetworksNetworkIdWarmSpareSettingsGetResponse,
    NetworksNetworkIdWarmSpareSettingsPutRequest,
    NetworksNetworkIdWarmSpareSettingsPutResponse,
    NetworksNetworkIdWirelessRfProfilesGetResponse,
    NetworksNetworkIdWirelessRfProfilesPostRequest,
    NetworksNetworkIdWirelessRfProfilesPostResponse,
    NetworksNetworkIdWirelessRfProfilesRfProfileIdGetResponse,
    NetworksNetworkIdWirelessRfProfilesRfProfileIdPutRequest,
    NetworksNetworkIdWirelessRfProfilesRfProfileIdPutResponse,
    NetworksNetworkIdWirelessSettingsGetResponse,
    NetworksNetworkIdWirelessSettingsPutRequest,
    NetworksNetworkIdWirelessSettingsPutResponse,
    ObjectType,
    OrganizationsGetResponse,
    OrganizationsOrganizationIdActionBatchesActionBatchIdPutRequest,
    OrganizationsOrganizationIdActionBatchesActionBatchIdPutResponse,
    OrganizationsOrganizationIdActionBatchesGetResponse,
    OrganizationsOrganizationIdActionBatchesPostRequest,
    OrganizationsOrganizationIdActionBatchesPostResponse,
    OrganizationsOrganizationIdAdminsAdminIdPutRequest,
    OrganizationsOrganizationIdAdminsAdminIdPutResponse,
    OrganizationsOrganizationIdAdminsGetResponse,
    OrganizationsOrganizationIdAdminsPostRequest,
    OrganizationsOrganizationIdAdminsPostResponse,
    OrganizationsOrganizationIdApiRequestsGetResponse,
    OrganizationsOrganizationIdApiRequestsOverviewGetResponse,
    OrganizationsOrganizationIdClaimPostRequest,
    OrganizationsOrganizationIdClaimPostResponse,
    OrganizationsOrganizationIdClonePostRequest,
    OrganizationsOrganizationIdClonePostResponse,
    OrganizationsOrganizationIdConfigTemplatesConfigTemplateIdSwitchProfilesGetResponse,
    OrganizationsOrganizationIdConfigTemplatesGetResponse,
    OrganizationsOrganizationIdConfigurationChangesGetResponse,
    OrganizationsOrganizationIdDevicesGetResponse,
    OrganizationsOrganizationIdDeviceStatusesGetResponse,
    OrganizationsOrganizationIdGetResponse,
    OrganizationsOrganizationIdInsightMonitoredMediaServersGetResponse,
    OrganizationsOrganizationIdInsightMonitoredMediaServersMonitoredMediaServerIdGetResponse,
    OrganizationsOrganizationIdInsightMonitoredMediaServersMonitoredMediaServerIdPutRequest,
    OrganizationsOrganizationIdInsightMonitoredMediaServersMonitoredMediaServerIdPutResponse,
    OrganizationsOrganizationIdInsightMonitoredMediaServersPostRequest,
    OrganizationsOrganizationIdInsightMonitoredMediaServersPostResponse,
    OrganizationsOrganizationIdInventoryGetResponse,
    OrganizationsOrganizationIdLicensesAssignSeatsPostRequest,
    OrganizationsOrganizationIdLicensesAssignSeatsPostResponse,
    OrganizationsOrganizationIdLicensesGetResponse,
    OrganizationsOrganizationIdLicensesLicenseIdGetResponse,
    OrganizationsOrganizationIdLicensesMoveSeatsPostRequest,
    OrganizationsOrganizationIdLicensesMoveSeatsPostResponse,
    OrganizationsOrganizationIdLicensesRenewSeatsPostRequest,
    OrganizationsOrganizationIdLicensesRenewSeatsPostResponse,
    OrganizationsOrganizationIdLicenseStateGetResponse,
    OrganizationsOrganizationIdNetworksCombinePostRequest,
    OrganizationsOrganizationIdNetworksCombinePostResponse,
    OrganizationsOrganizationIdNetworksGetResponse,
    OrganizationsOrganizationIdNetworksPostRequest,
    OrganizationsOrganizationIdNetworksPostResponse,
    OrganizationsOrganizationIdOpenapiSpecGetResponse,
    OrganizationsOrganizationIdSamlRolesGetResponse,
    OrganizationsOrganizationIdSamlRolesPostRequest,
    OrganizationsOrganizationIdSamlRolesPostResponse,
    OrganizationsOrganizationIdSamlRolesSamlRoleIdGetResponse,
    OrganizationsOrganizationIdSamlRolesSamlRoleIdPutRequest,
    OrganizationsOrganizationIdSamlRolesSamlRoleIdPutResponse,
    OrganizationsOrganizationIdSecurityEventsGetResponse,
    OrganizationsOrganizationIdSecurityIntrusionSettingsGetResponse,
    OrganizationsOrganizationIdSecurityIntrusionSettingsPutRequest,
    OrganizationsOrganizationIdSecurityIntrusionSettingsPutResponse,
    OrganizationsOrganizationIdSnmpGetResponse,
    OrganizationsOrganizationIdThirdPartyVPNPeersGetResponse,
    OrganizationsOrganizationIdThirdPartyVPNPeersPutRequest,
    OrganizationsOrganizationIdThirdPartyVPNPeersPutResponse,
    OrganizationsOrganizationIdUplinksLossAndLatencyGetResponse,
    OrganizationsOrganizationIdVpnFirewallRulesGetResponse,
    OrganizationsOrganizationIdVpnFirewallRulesPutRequest,
    OrganizationsOrganizationIdVpnFirewallRulesPutResponse,
    SsidNumber,
    State,
    Status1,
    Uplink,
    Uplink5,
)

app = MCPProxy(
    contact={
        'name': 'Meraki Developer Community',
        'url': 'https://meraki.io/community',
        'x-twitter': 'meraki',
    },
    description='The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.\n\n> Date: 05 March, 2023\n>\n> [Recent Updates](https://meraki.io/whats-new/)\n\n---\n\n[API Documentation](https://meraki.io/api)\n\n[Community Support](https://meraki.io/community)\n\n[Meraki Homepage](https://www.meraki.com)\n',
    title='Meraki Dashboard API',
    version='0.0.0-streaming',
    servers=[{'url': 'https://api.meraki.com/api/v0'}],
)


@app.get(
    '/devices/{serial}/camera/analytics/live',
    description=""" Returns live state from camera of analytics zones """,
    tags=['camera_analytics', 'network_camera_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_device_camera_analytics_live(serial: str):
    """
    Returns live state from camera of analytics zones
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/devices/{serial}/camera/analytics/overview',
    description=""" Returns an overview of aggregate analytics data for a timespan """,
    tags=['camera_analytics'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_device_camera_analytics_overview(
    serial: str,
    t0: Optional[str] = None,
    t1: Optional[str] = None,
    timespan: Optional[float] = None,
    object_type: Optional[ObjectType] = Query(None, alias='objectType'),
):
    """
    Returns an overview of aggregate analytics data for a timespan
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/devices/{serial}/camera/analytics/recent',
    description=""" Returns most recent record for analytics zones """,
    tags=['camera_analytics'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_device_camera_analytics_recent(
    serial: str, object_type: Optional[ObjectType] = Query(None, alias='objectType')
):
    """
    Returns most recent record for analytics zones
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/devices/{serial}/camera/analytics/zones',
    description=""" Returns all configured analytic zones for this camera """,
    tags=['camera_analytics'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_device_camera_analytics_zones(serial: str):
    """
    Returns all configured analytic zones for this camera
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/devices/{serial}/camera/analytics/zones/{zoneId}/history',
    description=""" Return historical records for analytic zones """,
    tags=['camera_analytics'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_device_camera_analytics_zone_history(
    serial: str,
    zone_id: str = Path(..., alias='zoneId'),
    t0: Optional[str] = None,
    t1: Optional[str] = None,
    timespan: Optional[float] = None,
    resolution: Optional[int] = None,
    object_type: Optional[ObjectType] = Query(None, alias='objectType'),
):
    """
    Return historical records for analytic zones
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/devices/{serial}/camera/qualityAndRetentionSettings',
    description=""" Returns quality and retention settings for the given camera """,
    tags=['camera_settings', 'network_camera_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_device_camera_quality_and_retention_settings(serial: str):
    """
    Returns quality and retention settings for the given camera
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/devices/{serial}/camera/qualityAndRetentionSettings',
    description=""" Update quality and retention settings for the given camera """,
    tags=['camera_settings', 'network_camera_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_device_camera_quality_and_retention_settings(
    serial: str, body: DevicesSerialCameraQualityAndRetentionSettingsPutRequest = None
):
    """
    Update quality and retention settings for the given camera
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/devices/{serial}/camera/video/settings',
    description=""" Returns video settings for the given camera """,
    tags=['camera_settings', 'network_camera_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_device_camera_video_settings(serial: str):
    """
    Returns video settings for the given camera
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/devices/{serial}/camera/video/settings',
    description=""" Update video settings for the given camera """,
    tags=['camera_settings', 'network_camera_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_device_camera_video_settings(
    serial: str, body: DevicesSerialCameraVideoSettingsPutRequest = None
):
    """
    Update video settings for the given camera
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/devices/{serial}/cellularGateway/settings',
    description=""" Show the LAN Settings of a MG """,
    tags=['cellular_gateway_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_device_cellular_gateway_settings(serial: str):
    """
    Show the LAN Settings of a MG
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/devices/{serial}/cellularGateway/settings',
    description=""" Update the LAN Settings for a single MG. """,
    tags=['cellular_gateway_management', 'network_device_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_device_cellular_gateway_settings(
    serial: str, body: DevicesSerialCellularGatewaySettingsPutRequest = None
):
    """
    Update the LAN Settings for a single MG.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/devices/{serial}/cellularGateway/settings/portForwardingRules',
    description=""" Returns the port forwarding rules for a single MG. """,
    tags=['cellular_gateway_management', 'port_forwarding_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_device_cellular_gateway_settings_port_forwarding_rules(serial: str):
    """
    Returns the port forwarding rules for a single MG.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/devices/{serial}/cellularGateway/settings/portForwardingRules',
    description=""" Updates the port forwarding rules for a single MG. """,
    tags=['cellular_gateway_management', 'port_forwarding_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_device_cellular_gateway_settings_port_forwarding_rules(
    serial: str,
    body: DevicesSerialCellularGatewaySettingsPortForwardingRulesPutRequest = None,
):
    """
    Updates the port forwarding rules for a single MG.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/devices/{serial}/clients',
    description=""" List the clients of a device, up to a maximum of a month ago. The usage of each client is returned in kilobytes. If the device is a switch, the switchport is returned; otherwise the switchport field is null. """,
    tags=['client_management', 'network_client_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_device_clients(
    serial: str, t0: Optional[str] = None, timespan: Optional[float] = None
):
    """
    List the clients of a device, up to a maximum of a month ago
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/devices/{serial}/switch/ports/cycle',
    description=""" Cycle a set of switch ports """,
    tags=['switch_port_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def cycle_device_switch_ports(
    serial: str, body: DevicesSerialSwitchPortsCyclePostRequest = ...
):
    """
    Cycle a set of switch ports
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/devices/{serial}/switchPortStatuses',
    description=""" Return the status for all the ports of a switch """,
    tags=['switch_port_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_device_switch_port_statuses(
    serial: str, t0: Optional[str] = None, timespan: Optional[float] = None
):
    """
    Return the status for all the ports of a switch
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/devices/{serial}/switchPortStatuses/packets',
    description=""" Return the packet counters for all the ports of a switch """,
    tags=['switch_port_management', 'network_management', 'network_device_statistics'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_device_switch_port_statuses_packets(
    serial: str, t0: Optional[str] = None, timespan: Optional[float] = None
):
    """
    Return the packet counters for all the ports of a switch
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/devices/{serial}/wireless/bluetooth/settings',
    description=""" Update the bluetooth settings for a wireless device """,
    tags=['network_bluetooth_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_device_wireless_bluetooth_settings(
    serial: str, body: DevicesSerialWirelessBluetoothSettingsPutRequest = None
):
    """
    Update the bluetooth settings for a wireless device
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/networks/{networkId}',
    description=""" Delete a network """,
    tags=['network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def delete_network(network_id: str = Path(..., alias='networkId')):
    """
    Delete a network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}',
    description=""" Return a network """,
    tags=['network_management', 'organization_network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network(network_id: str = Path(..., alias='networkId')):
    """
    Return a network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/networks/{networkId}',
    description=""" Update a network """,
    tags=[
        'network_management',
        'network_access_policies',
        'network_alerts',
        'network_device_management',
        'network_security_management',
        'organization_management',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_network(
    network_id: str = Path(..., alias='networkId'),
    body: NetworksNetworkIdPutRequest = None,
):
    """
    Update a network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/accessPolicies',
    description=""" List the access policies for this network. Only valid for MS networks. """,
    tags=['network_access_policies', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_access_policies(network_id: str = Path(..., alias='networkId')):
    """
    List the access policies for this network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/airMarshal',
    description=""" List Air Marshal scan results from a network """,
    tags=[
        'network_management',
        'network_device_statistics',
        'network_event_management',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_air_marshal(
    network_id: str = Path(..., alias='networkId'),
    t0: Optional[str] = None,
    timespan: Optional[float] = None,
):
    """
    List Air Marshal scan results from a network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/alertSettings',
    description=""" Return the alert configuration for this network """,
    tags=['network_alerts', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_alert_settings(network_id: str = Path(..., alias='networkId')):
    """
    Return the alert configuration for this network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/networks/{networkId}/alertSettings',
    description=""" Update the alert configuration for this network """,
    tags=['network_alerts', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_network_alert_settings(
    network_id: str = Path(..., alias='networkId'),
    body: NetworksNetworkIdAlertSettingsPutRequest = None,
):
    """
    Update the alert configuration for this network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/appliance/firewall/inboundFirewallRules',
    description=""" Return the inbound firewall rules for an MX network """,
    tags=[
        'firewall_management',
        'network_firewall_management',
        'firewall_rules_management',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_appliance_firewall_inbound_firewall_rules(
    network_id: str = Path(..., alias='networkId')
):
    """
    Return the inbound firewall rules for an MX network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/networks/{networkId}/appliance/firewall/inboundFirewallRules',
    description=""" Update the inbound firewall rules of an MX network """,
    tags=[
        'firewall_management',
        'network_firewall_management',
        'firewall_rules_management',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_network_appliance_firewall_inbound_firewall_rules(
    network_id: str = Path(..., alias='networkId'),
    body: NetworksNetworkIdApplianceFirewallInboundFirewallRulesPutRequest = None,
):
    """
    Update the inbound firewall rules of an MX network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/appliancePorts',
    description=""" List per-port VLAN settings for all ports of a MX. """,
    tags=['vlan_management', 'network_management', 'switch_port_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_appliance_ports(network_id: str = Path(..., alias='networkId')):
    """
    List per-port VLAN settings for all ports of a MX.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/appliancePorts/{appliancePortId}',
    description=""" Return per-port VLAN settings for a single MX port. """,
    tags=['vlan_management', 'switch_port_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_appliance_port(
    network_id: str = Path(..., alias='networkId'),
    appliance_port_id: str = Path(..., alias='appliancePortId'),
):
    """
    Return per-port VLAN settings for a single MX port.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/networks/{networkId}/appliancePorts/{appliancePortId}',
    description=""" Update the per-port VLAN settings for a single MX port. """,
    tags=['vlan_management', 'switch_port_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_network_appliance_port(
    network_id: str = Path(..., alias='networkId'),
    appliance_port_id: str = Path(..., alias='appliancePortId'),
    body: NetworksNetworkIdAppliancePortsAppliancePortIdPutRequest = None,
):
    """
    Update the per-port VLAN settings for a single MX port.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/networks/{networkId}/bind',
    description=""" Bind a network to a template. """,
    tags=[
        'network_management',
        'network_access_policies',
        'organization_network_management',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def bind_network(
    network_id: str = Path(..., alias='networkId'),
    body: NetworksNetworkIdBindPostRequest = ...,
):
    """
    Bind a network to a template.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/bluetoothClients',
    description=""" List the Bluetooth clients seen by APs in this network """,
    tags=[
        'client_management',
        'network_bluetooth_management',
        'network_client_management',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_bluetooth_clients(
    network_id: str = Path(..., alias='networkId'),
    t0: Optional[str] = None,
    timespan: Optional[float] = None,
    per_page: Optional[int] = Query(None, alias='perPage'),
    starting_after: Optional[str] = Query(None, alias='startingAfter'),
    ending_before: Optional[str] = Query(None, alias='endingBefore'),
    include_connectivity_history: Optional[bool] = Query(
        None, alias='includeConnectivityHistory'
    ),
):
    """
    List the Bluetooth clients seen by APs in this network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/bluetoothClients/{bluetoothClientId}',
    description=""" Return a Bluetooth client. Bluetooth clients can be identified by their ID or their MAC. """,
    tags=[
        'network_bluetooth_management',
        'client_management',
        'network_client_management',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_bluetooth_client(
    network_id: str = Path(..., alias='networkId'),
    bluetooth_client_id: str = Path(..., alias='bluetoothClientId'),
    include_connectivity_history: Optional[bool] = Query(
        None, alias='includeConnectivityHistory'
    ),
    connectivity_history_timespan: Optional[int] = Query(
        None, alias='connectivityHistoryTimespan'
    ),
):
    """
    Return a Bluetooth client
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/bluetoothSettings',
    description=""" Return the Bluetooth settings for a network. <a href="https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)">Bluetooth settings</a> must be enabled on the network. """,
    tags=['network_bluetooth_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_bluetooth_settings(network_id: str = Path(..., alias='networkId')):
    """
    Return the Bluetooth settings for a network. <a href="https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)">Bluetooth settings</a> must be enabled on the network.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/networks/{networkId}/bluetoothSettings',
    description=""" Update the Bluetooth settings for a network. See the docs page for <a href="https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)">Bluetooth settings</a>. """,
    tags=['network_bluetooth_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_network_bluetooth_settings(
    network_id: str = Path(..., alias='networkId'),
    body: NetworksNetworkIdBluetoothSettingsPutRequest = None,
):
    """
    Update the Bluetooth settings for a network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/camera/qualityRetentionProfiles',
    description=""" List the quality retention profiles for this network """,
    tags=[
        'camera_analytics',
        'camera_settings',
        'network_management',
        'network_camera_management',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_camera_quality_retention_profiles(
    network_id: str = Path(..., alias='networkId')
):
    """
    List the quality retention profiles for this network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/networks/{networkId}/camera/qualityRetentionProfiles',
    description=""" Creates new quality retention profile for this network. """,
    tags=['camera_settings', 'network_camera_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def create_network_camera_quality_retention_profile(
    network_id: str = Path(..., alias='networkId'),
    body: NetworksNetworkIdCameraQualityRetentionProfilesPostRequest = ...,
):
    """
    Creates new quality retention profile for this network.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/networks/{networkId}/camera/qualityRetentionProfiles/{qualityRetentionProfileId}',
    description=""" Delete an existing quality retention profile for this network. """,
    tags=['camera_settings', 'network_camera_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def delete_network_camera_quality_retention_profile(
    network_id: str = Path(..., alias='networkId'),
    quality_retention_profile_id: str = Path(..., alias='qualityRetentionProfileId'),
):
    """
    Delete an existing quality retention profile for this network.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/camera/qualityRetentionProfiles/{qualityRetentionProfileId}',
    description=""" Retrieve a single quality retention profile """,
    tags=['camera_settings', 'network_camera_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_camera_quality_retention_profile(
    network_id: str = Path(..., alias='networkId'),
    quality_retention_profile_id: str = Path(..., alias='qualityRetentionProfileId'),
):
    """
    Retrieve a single quality retention profile
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/networks/{networkId}/camera/qualityRetentionProfiles/{qualityRetentionProfileId}',
    description=""" Update an existing quality retention profile for this network. """,
    tags=['camera_settings', 'network_camera_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_network_camera_quality_retention_profile(
    network_id: str = Path(..., alias='networkId'),
    quality_retention_profile_id: str = Path(..., alias='qualityRetentionProfileId'),
    body: NetworksNetworkIdCameraQualityRetentionProfilesQualityRetentionProfileIdPutRequest = None,
):
    """
    Update an existing quality retention profile for this network.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/camera/schedules',
    description=""" Returns a list of all camera recording schedules. """,
    tags=['network_camera_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_camera_schedules(network_id: str = Path(..., alias='networkId')):
    """
    Returns a list of all camera recording schedules.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/networks/{networkId}/cameras/{serial}/snapshot',
    description=""" Generate a snapshot of what the camera sees at the specified time and return a link to that image. """,
    tags=['network_camera_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def generate_network_camera_snapshot(
    network_id: str = Path(..., alias='networkId'),
    serial: str = ...,
    body: NetworksNetworkIdCamerasSerialSnapshotPostRequest = None,
):
    """
    Generate a snapshot of what the camera sees at the specified time and return a link to that image.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/cameras/{serial}/videoLink',
    description=""" Returns video link to the specified camera. If a timestamp is supplied, it links to that timestamp. """,
    tags=['network_camera_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_camera_video_link(
    network_id: str = Path(..., alias='networkId'),
    serial: str = ...,
    timestamp: Optional[str] = None,
):
    """
    Returns video link to the specified camera
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/cellularFirewallRules',
    description=""" Return the cellular firewall rules for an MX network """,
    tags=['firewall_management', 'network_firewall_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_cellular_firewall_rules(network_id: str = Path(..., alias='networkId')):
    """
    Return the cellular firewall rules for an MX network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/networks/{networkId}/cellularFirewallRules',
    description=""" Update the cellular firewall rules of an MX network """,
    tags=['firewall_management', 'network_firewall_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_network_cellular_firewall_rules(
    network_id: str = Path(..., alias='networkId'),
    body: NetworksNetworkIdCellularFirewallRulesPutRequest = None,
):
    """
    Update the cellular firewall rules of an MX network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/clients',
    description=""" List the clients that have used this network in the timespan """,
    tags=['client_management', 'network_client_management', 'network_usage_monitoring'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_clients(
    network_id: str = Path(..., alias='networkId'),
    t0: Optional[str] = None,
    timespan: Optional[float] = None,
    per_page: Optional[int] = Query(None, alias='perPage'),
    starting_after: Optional[str] = Query(None, alias='startingAfter'),
    ending_before: Optional[str] = Query(None, alias='endingBefore'),
):
    """
    List the clients that have used this network in the timespan
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/clients/connectionStats',
    description=""" Aggregated connectivity info for this network, grouped by clients """,
    tags=[
        'client_management',
        'network_management',
        'network_connectivity_stats',
        'network_client_management',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_clients_connection_stats(
    network_id: str = Path(..., alias='networkId'),
    t0: Optional[str] = None,
    t1: Optional[str] = None,
    timespan: Optional[float] = None,
    band: Optional[Band] = None,
    ssid: Optional[int] = None,
    vlan: Optional[int] = None,
    ap_tag: Optional[str] = Query(None, alias='apTag'),
):
    """
    Aggregated connectivity info for this network, grouped by clients
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/clients/latencyStats',
    description=""" Aggregated latency info for this network, grouped by clients """,
    tags=[
        'network_connectivity_stats',
        'network_latency_monitoring',
        'network_usage_monitoring',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_clients_latency_stats(
    network_id: str = Path(..., alias='networkId'),
    t0: Optional[str] = None,
    t1: Optional[str] = None,
    timespan: Optional[float] = None,
    band: Optional[Band] = None,
    ssid: Optional[int] = None,
    vlan: Optional[int] = None,
    ap_tag: Optional[str] = Query(None, alias='apTag'),
    fields: Optional[str] = None,
):
    """
    Aggregated latency info for this network, grouped by clients
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/networks/{networkId}/clients/provision',
    description=""" Provisions a client with a name and policy. Clients can be provisioned before they associate to the network. """,
    tags=['client_management', 'network_client_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def provision_network_clients(
    network_id: str = Path(..., alias='networkId'),
    body: NetworksNetworkIdClientsProvisionPostRequest = ...,
):
    """
    Provisions a client with a name and policy
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/clients/{clientId}',
    description=""" Return the client associated with the given identifier. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP. """,
    tags=['client_management', 'network_client_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_client(
    network_id: str = Path(..., alias='networkId'),
    client_id: str = Path(..., alias='clientId'),
):
    """
    Return the client associated with the given identifier
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/clients/{clientId}/connectionStats',
    description=""" Aggregated connectivity info for a given client on this network. Clients are identified by their MAC. """,
    tags=[
        'client_management',
        'network_management',
        'network_connectivity_stats',
        'network_client_management',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_client_connection_stats(
    network_id: str = Path(..., alias='networkId'),
    client_id: str = Path(..., alias='clientId'),
    t0: Optional[str] = None,
    t1: Optional[str] = None,
    timespan: Optional[float] = None,
    band: Optional[Band] = None,
    ssid: Optional[int] = None,
    vlan: Optional[int] = None,
    ap_tag: Optional[str] = Query(None, alias='apTag'),
):
    """
    Aggregated connectivity info for a given client on this network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/clients/{clientId}/events',
    description=""" Return the events associated with this client. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP. """,
    tags=['client_management', 'network_event_management', 'network_client_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_client_events(
    network_id: str = Path(..., alias='networkId'),
    client_id: str = Path(..., alias='clientId'),
    per_page: Optional[int] = Query(None, alias='perPage'),
    starting_after: Optional[str] = Query(None, alias='startingAfter'),
    ending_before: Optional[str] = Query(None, alias='endingBefore'),
):
    """
    Return the events associated with this client
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/clients/{clientId}/latencyHistory',
    description=""" Return the latency history for a client. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP. The latency data is from a sample of 2% of packets and is grouped into 4 traffic categories: background, best effort, video, voice. Within these categories the sampled packet counters are bucketed by latency in milliseconds. """,
    tags=[
        'network_latency_monitoring',
        'network_connectivity_stats',
        'client_management',
        'network_client_management',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_client_latency_history(
    network_id: str = Path(..., alias='networkId'),
    client_id: str = Path(..., alias='clientId'),
    t0: Optional[str] = None,
    t1: Optional[str] = None,
    timespan: Optional[float] = None,
    resolution: Optional[int] = None,
):
    """
    Return the latency history for a client
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/clients/{clientId}/latencyStats',
    description=""" Aggregated latency info for a given client on this network. Clients are identified by their MAC. """,
    tags=[
        'network_connectivity_stats',
        'network_latency_monitoring',
        'network_client_management',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_client_latency_stats(
    network_id: str = Path(..., alias='networkId'),
    client_id: str = Path(..., alias='clientId'),
    t0: Optional[str] = None,
    t1: Optional[str] = None,
    timespan: Optional[float] = None,
    band: Optional[Band] = None,
    ssid: Optional[int] = None,
    vlan: Optional[int] = None,
    ap_tag: Optional[str] = Query(None, alias='apTag'),
    fields: Optional[str] = None,
):
    """
    Aggregated latency info for a given client on this network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/clients/{clientId}/policy',
    description=""" Return the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP. """,
    tags=['network_access_policies', 'network_client_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_client_policy(
    network_id: str = Path(..., alias='networkId'),
    client_id: str = Path(..., alias='clientId'),
):
    """
    Return the policy assigned to a client on the network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/networks/{networkId}/clients/{clientId}/policy',
    description=""" Update the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP. """,
    tags=['network_access_policies', 'network_client_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_network_client_policy(
    network_id: str = Path(..., alias='networkId'),
    client_id: str = Path(..., alias='clientId'),
    body: NetworksNetworkIdClientsClientIdPolicyPutRequest = ...,
):
    """
    Update the policy assigned to a client on the network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/clients/{clientId}/splashAuthorizationStatus',
    description=""" Return the splash authorization for a client, for each SSID they've associated with through splash. Only enabled SSIDs with Click-through splash enabled will be included. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP. """,
    tags=['client_management', 'network_client_management', 'network_access_policies'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_client_splash_authorization_status(
    network_id: str = Path(..., alias='networkId'),
    client_id: str = Path(..., alias='clientId'),
):
    """
    Return the splash authorization for a client, for each SSID they've associated with through splash
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/networks/{networkId}/clients/{clientId}/splashAuthorizationStatus',
    description=""" Update a client's splash authorization. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP. """,
    tags=['network_client_management', 'network_access_policies', 'client_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_network_client_splash_authorization_status(
    network_id: str = Path(..., alias='networkId'),
    client_id: str = Path(..., alias='clientId'),
    body: NetworksNetworkIdClientsClientIdSplashAuthorizationStatusPutRequest = ...,
):
    """
    Update a client's splash authorization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/clients/{clientId}/usageHistory',
    description=""" Return the client's daily usage history. Usage data is in kilobytes. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP. """,
    tags=['client_management', 'network_usage_monitoring', 'network_client_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_client_usage_history(
    network_id: str = Path(..., alias='networkId'),
    client_id: str = Path(..., alias='clientId'),
):
    """
    Return the client's daily usage history
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/connectionStats',
    description=""" Aggregated connectivity info for this network """,
    tags=['network_management', 'network_connectivity_stats'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_connection_stats(
    network_id: str = Path(..., alias='networkId'),
    t0: Optional[str] = None,
    t1: Optional[str] = None,
    timespan: Optional[float] = None,
    band: Optional[Band] = None,
    ssid: Optional[int] = None,
    vlan: Optional[int] = None,
    ap_tag: Optional[str] = Query(None, alias='apTag'),
):
    """
    Aggregated connectivity info for this network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/contentFiltering',
    description=""" Return the content filtering settings for an MX network """,
    tags=['network_content_filtering', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_content_filtering(network_id: str = Path(..., alias='networkId')):
    """
    Return the content filtering settings for an MX network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/networks/{networkId}/contentFiltering',
    description=""" Update the content filtering settings for an MX network """,
    tags=['network_content_filtering', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_network_content_filtering(
    network_id: str = Path(..., alias='networkId'),
    body: NetworksNetworkIdContentFilteringPutRequest = None,
):
    """
    Update the content filtering settings for an MX network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/contentFiltering/categories',
    description=""" List all available content filtering categories for an MX network """,
    tags=['network_content_filtering', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_content_filtering_categories(
    network_id: str = Path(..., alias='networkId')
):
    """
    List all available content filtering categories for an MX network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/devices',
    description=""" List the devices in a network """,
    tags=[
        'network_device_management',
        'network_client_management',
        'network_management',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_devices(network_id: str = Path(..., alias='networkId')):
    """
    List the devices in a network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/networks/{networkId}/devices/claim',
    description=""" Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requests against that device to succeed) """,
    tags=['network_device_management', 'device_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def claim_network_devices(
    network_id: str = Path(..., alias='networkId'),
    body: NetworksNetworkIdDevicesClaimPostRequest = None,
):
    """
    Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requests against that device to succeed)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/devices/connectionStats',
    description=""" Aggregated connectivity info for this network, grouped by node """,
    tags=['network_management', 'network_connectivity_stats'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_devices_connection_stats(
    network_id: str = Path(..., alias='networkId'),
    t0: Optional[str] = None,
    t1: Optional[str] = None,
    timespan: Optional[float] = None,
    band: Optional[Band] = None,
    ssid: Optional[int] = None,
    vlan: Optional[int] = None,
    ap_tag: Optional[str] = Query(None, alias='apTag'),
):
    """
    Aggregated connectivity info for this network, grouped by node
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/devices/latencyStats',
    description=""" Aggregated latency info for this network, grouped by node """,
    tags=['network_connectivity_stats', 'network_latency_monitoring'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_devices_latency_stats(
    network_id: str = Path(..., alias='networkId'),
    t0: Optional[str] = None,
    t1: Optional[str] = None,
    timespan: Optional[float] = None,
    band: Optional[Band] = None,
    ssid: Optional[int] = None,
    vlan: Optional[int] = None,
    ap_tag: Optional[str] = Query(None, alias='apTag'),
    fields: Optional[str] = None,
):
    """
    Aggregated latency info for this network, grouped by node
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/devices/{serial}',
    description=""" Return a single device """,
    tags=['network_device_management', 'device_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_device(
    network_id: str = Path(..., alias='networkId'), serial: str = ...
):
    """
    Return a single device
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/networks/{networkId}/devices/{serial}',
    description=""" Update the attributes of a device """,
    tags=['network_device_management', 'device_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_network_device(
    network_id: str = Path(..., alias='networkId'),
    serial: str = ...,
    body: NetworksNetworkIdDevicesSerialPutRequest = None,
):
    """
    Update the attributes of a device
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/devices/{serial}/connectionStats',
    description=""" Aggregated connectivity info for a given AP on this network """,
    tags=[
        'network_management',
        'network_connectivity_stats',
        'network_device_statistics',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_device_connection_stats(
    network_id: str = Path(..., alias='networkId'),
    serial: str = ...,
    t0: Optional[str] = None,
    t1: Optional[str] = None,
    timespan: Optional[float] = None,
    band: Optional[Band] = None,
    ssid: Optional[int] = None,
    vlan: Optional[int] = None,
    ap_tag: Optional[str] = Query(None, alias='apTag'),
):
    """
    Aggregated connectivity info for a given AP on this network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/devices/{serial}/latencyStats',
    description=""" Aggregated latency info for a given AP on this network """,
    tags=[
        'network_latency_monitoring',
        'network_connectivity_stats',
        'network_device_statistics',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_device_latency_stats(
    network_id: str = Path(..., alias='networkId'),
    serial: str = ...,
    t0: Optional[str] = None,
    t1: Optional[str] = None,
    timespan: Optional[float] = None,
    band: Optional[Band] = None,
    ssid: Optional[int] = None,
    vlan: Optional[int] = None,
    ap_tag: Optional[str] = Query(None, alias='apTag'),
    fields: Optional[str] = None,
):
    """
    Aggregated latency info for a given AP on this network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/devices/{serial}/lossAndLatencyHistory',
    description=""" Get the uplink loss percentage and latency in milliseconds for a wired network device. """,
    tags=[
        'network_management',
        'network_latency_monitoring',
        'network_connectivity_stats',
        'network_device_statistics',
        'organization_uplinks_monitoring',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_device_loss_and_latency_history(
    network_id: str = Path(..., alias='networkId'),
    serial: str = ...,
    t0: Optional[str] = None,
    t1: Optional[str] = None,
    timespan: Optional[float] = None,
    resolution: Optional[int] = None,
    uplink: Optional[Uplink] = None,
    ip: str = ...,
):
    """
    Get the uplink loss percentage and latency in milliseconds for a wired network device.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/devices/{serial}/performance',
    description=""" Return the performance score for a single MX. Only primary MX devices supported. If no data is available, a 204 error code is returned. """,
    tags=[
        'network_device_statistics',
        'network_management',
        'network_latency_monitoring',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_device_performance(
    network_id: str = Path(..., alias='networkId'), serial: str = ...
):
    """
    Return the performance score for a single MX
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/networks/{networkId}/devices/{serial}/reboot',
    description=""" Reboot a device """,
    tags=['network_device_management', 'device_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def reboot_network_device(
    network_id: str = Path(..., alias='networkId'), serial: str = ...
):
    """
    Reboot a device
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/networks/{networkId}/devices/{serial}/remove',
    description=""" Remove a single device """,
    tags=['network_device_management', 'device_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def remove_network_device(
    network_id: str = Path(..., alias='networkId'), serial: str = ...
):
    """
    Remove a single device
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/devices/{serial}/uplink',
    description=""" Return the uplink information for a device. """,
    tags=[
        'network_uplink_management',
        'network_device_management',
        'network_management',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_device_uplink(
    network_id: str = Path(..., alias='networkId'), serial: str = ...
):
    """
    Return the uplink information for a device.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/devices/{serial}/wireless/status',
    description=""" Return the SSID statuses of an access point """,
    tags=['network_management', 'network_ssid_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_device_wireless_status(
    network_id: str = Path(..., alias='networkId'), serial: str = ...
):
    """
    Return the SSID statuses of an access point
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/events',
    description=""" List the events for the network """,
    tags=['network_event_management', 'client_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_events(
    network_id: str = Path(..., alias='networkId'),
    product_type: Optional[str] = Query(None, alias='productType'),
    included_event_types: Optional[IncludedEventTypes] = Query(
        None, alias='includedEventTypes'
    ),
    excluded_event_types: Optional[ExcludedEventTypes] = Query(
        None, alias='excludedEventTypes'
    ),
    device_mac: Optional[str] = Query(None, alias='deviceMac'),
    device_serial: Optional[str] = Query(None, alias='deviceSerial'),
    device_name: Optional[str] = Query(None, alias='deviceName'),
    client_ip: Optional[str] = Query(None, alias='clientIp'),
    client_mac: Optional[str] = Query(None, alias='clientMac'),
    client_name: Optional[str] = Query(None, alias='clientName'),
    sm_device_mac: Optional[str] = Query(None, alias='smDeviceMac'),
    sm_device_name: Optional[str] = Query(None, alias='smDeviceName'),
    per_page: Optional[int] = Query(None, alias='perPage'),
    starting_after: Optional[str] = Query(None, alias='startingAfter'),
    ending_before: Optional[str] = Query(None, alias='endingBefore'),
):
    """
    List the events for the network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/events/eventTypes',
    description=""" List the event type to human-readable description """,
    tags=['network_event_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_events_event_types(network_id: str = Path(..., alias='networkId')):
    """
    List the event type to human-readable description
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/failedConnections',
    description=""" List of all failed client connection events on this network in a given time range """,
    tags=[
        'client_management',
        'network_management',
        'network_event_management',
        'network_client_management',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_failed_connections(
    network_id: str = Path(..., alias='networkId'),
    t0: Optional[str] = None,
    t1: Optional[str] = None,
    timespan: Optional[float] = None,
    band: Optional[Band] = None,
    ssid: Optional[int] = None,
    vlan: Optional[int] = None,
    ap_tag: Optional[str] = Query(None, alias='apTag'),
    serial: Optional[str] = None,
    client_id: Optional[str] = Query(None, alias='clientId'),
):
    """
    List of all failed client connection events on this network in a given time range
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/firewalledServices',
    description=""" List the appliance services and their accessibility rules """,
    tags=['network_access_policies', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_firewalled_services(network_id: str = Path(..., alias='networkId')):
    """
    List the appliance services and their accessibility rules
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/firewalledServices/{service}',
    description=""" Return the accessibility settings of the given service ('ICMP', 'web', or 'SNMP') """,
    tags=[
        'network_access_policies',
        'network_management',
        'network_firewall_management',
        'organization_snmp_configuration',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_firewalled_service(
    network_id: str = Path(..., alias='networkId'), service: str = ...
):
    """
    Return the accessibility settings of the given service ('ICMP', 'web', or 'SNMP')
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/networks/{networkId}/firewalledServices/{service}',
    description=""" Updates the accessibility settings for the given service ('ICMP', 'web', or 'SNMP') """,
    tags=['network_access_policies', 'network_firewall_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_network_firewalled_service(
    network_id: str = Path(..., alias='networkId'),
    service: str = ...,
    body: NetworksNetworkIdFirewalledServicesServicePutRequest = ...,
):
    """
    Updates the accessibility settings for the given service ('ICMP', 'web', or 'SNMP')
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/floorPlans',
    description=""" List the floor plans that belong to your network """,
    tags=['network_floor_plan_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_floor_plans(network_id: str = Path(..., alias='networkId')):
    """
    List the floor plans that belong to your network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/networks/{networkId}/floorPlans',
    description=""" Upload a floor plan """,
    tags=['network_floor_plan_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def create_network_floor_plan(
    network_id: str = Path(..., alias='networkId'),
    body: NetworksNetworkIdFloorPlansPostRequest = ...,
):
    """
    Upload a floor plan
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/networks/{networkId}/floorPlans/{floorPlanId}',
    description=""" Destroy a floor plan """,
    tags=['network_floor_plan_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def delete_network_floor_plan(
    network_id: str = Path(..., alias='networkId'),
    floor_plan_id: str = Path(..., alias='floorPlanId'),
):
    """
    Destroy a floor plan
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/floorPlans/{floorPlanId}',
    description=""" Find a floor plan by ID """,
    tags=['network_floor_plan_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_floor_plan(
    network_id: str = Path(..., alias='networkId'),
    floor_plan_id: str = Path(..., alias='floorPlanId'),
):
    """
    Find a floor plan by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/networks/{networkId}/floorPlans/{floorPlanId}',
    description=""" Update a floor plan's geolocation and other meta data """,
    tags=['network_floor_plan_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_network_floor_plan(
    network_id: str = Path(..., alias='networkId'),
    floor_plan_id: str = Path(..., alias='floorPlanId'),
    body: NetworksNetworkIdFloorPlansFloorPlanIdPutRequest = None,
):
    """
    Update a floor plan's geolocation and other meta data
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/l3FirewallRules',
    description=""" Return the L3 firewall rules for an MX network """,
    tags=[
        'firewall_management',
        'network_firewall_management',
        'firewall_rules_management',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_l3_firewall_rules(network_id: str = Path(..., alias='networkId')):
    """
    Return the L3 firewall rules for an MX network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/networks/{networkId}/l3FirewallRules',
    description=""" Update the L3 firewall rules of an MX network """,
    tags=[
        'firewall_management',
        'network_firewall_management',
        'firewall_rules_management',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_network_l3_firewall_rules(
    network_id: str = Path(..., alias='networkId'),
    body: NetworksNetworkIdL3FirewallRulesPutRequest = None,
):
    """
    Update the L3 firewall rules of an MX network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/l7FirewallRules',
    description=""" List the MX L7 firewall rules for an MX network """,
    tags=[
        'firewall_management',
        'network_firewall_management',
        'firewall_rules_management',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_l7_firewall_rules(network_id: str = Path(..., alias='networkId')):
    """
    List the MX L7 firewall rules for an MX network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/networks/{networkId}/l7FirewallRules',
    description=""" Update the MX L7 firewall rules for an MX network """,
    tags=[
        'firewall_management',
        'firewall_rules_management',
        'network_firewall_management',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_network_l7_firewall_rules(
    network_id: str = Path(..., alias='networkId'),
    body: NetworksNetworkIdL7FirewallRulesPutRequest = None,
):
    """
    Update the MX L7 firewall rules for an MX network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/l7FirewallRules/applicationCategories',
    description=""" Return the L7 firewall application categories and their associated applications for an MX network """,
    tags=[
        'network_management',
        'firewall_management',
        'network_firewall_management',
        'firewall_rules_management',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_l7_firewall_rules_application_categories(
    network_id: str = Path(..., alias='networkId')
):
    """
    Return the L7 firewall application categories and their associated applications for an MX network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/latencyStats',
    description=""" Aggregated latency info for this network """,
    tags=[
        'network_management',
        'network_latency_monitoring',
        'network_connectivity_stats',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_latency_stats(
    network_id: str = Path(..., alias='networkId'),
    t0: Optional[str] = None,
    t1: Optional[str] = None,
    timespan: Optional[float] = None,
    band: Optional[Band] = None,
    ssid: Optional[int] = None,
    vlan: Optional[int] = None,
    ap_tag: Optional[str] = Query(None, alias='apTag'),
    fields: Optional[str] = None,
):
    """
    Aggregated latency info for this network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/merakiAuthUsers',
    description=""" List the splash or RADIUS users configured under Meraki Authentication for a network """,
    tags=['meraki_authentication_users', 'user_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_meraki_auth_users(network_id: str = Path(..., alias='networkId')):
    """
    List the splash or RADIUS users configured under Meraki Authentication for a network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/merakiAuthUsers/{merakiAuthUserId}',
    description=""" Return the Meraki Auth splash or RADIUS user """,
    tags=['meraki_authentication_users', 'user_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_meraki_auth_user(
    network_id: str = Path(..., alias='networkId'),
    meraki_auth_user_id: str = Path(..., alias='merakiAuthUserId'),
):
    """
    Return the Meraki Auth splash or RADIUS user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/oneToManyNatRules',
    description=""" Return the 1:Many NAT mapping rules for an MX network """,
    tags=['nat_rules_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_one_to_many_nat_rules(network_id: str = Path(..., alias='networkId')):
    """
    Return the 1:Many NAT mapping rules for an MX network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/networks/{networkId}/oneToManyNatRules',
    description=""" Set the 1:Many NAT mapping rules for an MX network """,
    tags=['nat_rules_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_network_one_to_many_nat_rules(
    network_id: str = Path(..., alias='networkId'),
    body: NetworksNetworkIdOneToManyNatRulesPutRequest = ...,
):
    """
    Set the 1:Many NAT mapping rules for an MX network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/oneToOneNatRules',
    description=""" Return the 1:1 NAT mapping rules for an MX network """,
    tags=['nat_rules_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_one_to_one_nat_rules(network_id: str = Path(..., alias='networkId')):
    """
    Return the 1:1 NAT mapping rules for an MX network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/networks/{networkId}/oneToOneNatRules',
    description=""" Set the 1:1 NAT mapping rules for an MX network """,
    tags=['nat_rules_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_network_one_to_one_nat_rules(
    network_id: str = Path(..., alias='networkId'),
    body: NetworksNetworkIdOneToOneNatRulesPutRequest = ...,
):
    """
    Set the 1:1 NAT mapping rules for an MX network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/pii/piiKeys',
    description=""" List the keys required to access Personally Identifiable Information (PII) for a given identifier. Exactly one identifier will be accepted. If the organization contains org-wide Systems Manager users matching the key provided then there will be an entry with the key "0" containing the applicable keys.

## ALTERNATE PATH

```
/organizations/{organizationId}/pii/piiKeys
``` """,
    tags=['pii_management', 'client_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_pii_pii_keys(
    network_id: str = Path(..., alias='networkId'),
    username: Optional[str] = None,
    email: Optional[str] = None,
    mac: Optional[str] = None,
    serial: Optional[str] = None,
    imei: Optional[str] = None,
    bluetooth_mac: Optional[str] = Query(None, alias='bluetoothMac'),
):
    """
    List the keys required to access Personally Identifiable Information (PII) for a given identifier
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/pii/requests',
    description=""" List the PII requests for this network or organization

## ALTERNATE PATH

```
/organizations/{organizationId}/pii/requests
``` """,
    tags=['pii_management', 'network_management', 'organization_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_pii_requests(network_id: str = Path(..., alias='networkId')):
    """
    List the PII requests for this network or organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/networks/{networkId}/pii/requests',
    description=""" Submit a new delete or restrict processing PII request

## ALTERNATE PATH

```
/organizations/{organizationId}/pii/requests
``` """,
    tags=['pii_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def create_network_pii_request(
    network_id: str = Path(..., alias='networkId'),
    body: NetworksNetworkIdPiiRequestsPostRequest = None,
):
    """
    Submit a new delete or restrict processing PII request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/networks/{networkId}/pii/requests/{requestId}',
    description=""" Delete a restrict processing PII request

## ALTERNATE PATH

```
/organizations/{organizationId}/pii/requests/{requestId}
``` """,
    tags=['pii_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def delete_network_pii_request(
    network_id: str = Path(..., alias='networkId'),
    request_id: str = Path(..., alias='requestId'),
):
    """
    Delete a restrict processing PII request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/pii/requests/{requestId}',
    description=""" Return a PII request

## ALTERNATE PATH

```
/organizations/{organizationId}/pii/requests/{requestId}
``` """,
    tags=['pii_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_pii_request(
    network_id: str = Path(..., alias='networkId'),
    request_id: str = Path(..., alias='requestId'),
):
    """
    Return a PII request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/pii/smDevicesForKey',
    description=""" Given a piece of Personally Identifiable Information (PII), return the Systems Manager device ID(s) associated with that identifier. These device IDs can be used with the Systems Manager API endpoints to retrieve device details. Exactly one identifier will be accepted.

## ALTERNATE PATH

```
/organizations/{organizationId}/pii/smDevicesForKey
``` """,
    tags=['pii_management', 'network_device_management', 'network_client_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_pii_sm_devices_for_key(
    network_id: str = Path(..., alias='networkId'),
    username: Optional[str] = None,
    email: Optional[str] = None,
    mac: Optional[str] = None,
    serial: Optional[str] = None,
    imei: Optional[str] = None,
    bluetooth_mac: Optional[str] = Query(None, alias='bluetoothMac'),
):
    """
    Given a piece of Personally Identifiable Information (PII), return the Systems Manager device ID(s) associated with that identifier
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/pii/smOwnersForKey',
    description=""" Given a piece of Personally Identifiable Information (PII), return the Systems Manager owner ID(s) associated with that identifier. These owner IDs can be used with the Systems Manager API endpoints to retrieve owner details. Exactly one identifier will be accepted.

## ALTERNATE PATH

```
/organizations/{organizationId}/pii/smOwnersForKey
``` """,
    tags=['pii_management', 'client_management', 'network_device_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_pii_sm_owners_for_key(
    network_id: str = Path(..., alias='networkId'),
    username: Optional[str] = None,
    email: Optional[str] = None,
    mac: Optional[str] = None,
    serial: Optional[str] = None,
    imei: Optional[str] = None,
    bluetooth_mac: Optional[str] = Query(None, alias='bluetoothMac'),
):
    """
    Given a piece of Personally Identifiable Information (PII), return the Systems Manager owner ID(s) associated with that identifier
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/portForwardingRules',
    description=""" Return the port forwarding rules for an MX network """,
    tags=['cellular_gateway_management', 'port_forwarding_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_port_forwarding_rules(network_id: str = Path(..., alias='networkId')):
    """
    Return the port forwarding rules for an MX network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/networks/{networkId}/portForwardingRules',
    description=""" Update the port forwarding rules for an MX network """,
    tags=['cellular_gateway_management', 'port_forwarding_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_network_port_forwarding_rules(
    network_id: str = Path(..., alias='networkId'),
    body: NetworksNetworkIdPortForwardingRulesPutRequest = ...,
):
    """
    Update the port forwarding rules for an MX network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/security/intrusionSettings',
    description=""" Returns all supported intrusion settings for an MX network """,
    tags=[
        'organization_security_settings',
        'network_management',
        'network_access_policies',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_security_intrusion_settings(
    network_id: str = Path(..., alias='networkId')
):
    """
    Returns all supported intrusion settings for an MX network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/networks/{networkId}/security/intrusionSettings',
    description=""" Set the supported intrusion settings for an MX network """,
    tags=[
        'network_management',
        'security_settings_management',
        'organization_security_settings',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_network_security_intrusion_settings(
    network_id: str = Path(..., alias='networkId'),
    body: NetworksNetworkIdSecurityIntrusionSettingsPutRequest = None,
):
    """
    Set the supported intrusion settings for an MX network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/security/malwareSettings',
    description=""" Returns all supported malware settings for an MX network """,
    tags=['security_settings_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_security_malware_settings(
    network_id: str = Path(..., alias='networkId')
):
    """
    Returns all supported malware settings for an MX network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/networks/{networkId}/security/malwareSettings',
    description=""" Set the supported malware settings for an MX network """,
    tags=['security_settings_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_network_security_malware_settings(
    network_id: str = Path(..., alias='networkId'),
    body: NetworksNetworkIdSecurityMalwareSettingsPutRequest = ...,
):
    """
    Set the supported malware settings for an MX network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/securityEvents',
    description=""" List the security events (intrusion detection only) for a network """,
    tags=[
        'network_event_management',
        'security_settings_management',
        'organization_security_settings',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_security_events(
    network_id: str = Path(..., alias='networkId'),
    t0: Optional[str] = None,
    t1: Optional[str] = None,
    timespan: Optional[float] = None,
    per_page: Optional[int] = Query(None, alias='perPage'),
    starting_after: Optional[str] = Query(None, alias='startingAfter'),
    ending_before: Optional[str] = Query(None, alias='endingBefore'),
):
    """
    List the security events (intrusion detection only) for a network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/siteToSiteVpn',
    description=""" Return the site-to-site VPN settings of a network. Only valid for MX networks. """,
    tags=['vpn_management', 'organization_vpn_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_site_to_site_vpn(network_id: str = Path(..., alias='networkId')):
    """
    Return the site-to-site VPN settings of a network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/networks/{networkId}/siteToSiteVpn',
    description=""" Update the site-to-site VPN settings of a network. Only valid for MX networks in NAT mode. """,
    tags=['vpn_management', 'organization_vpn_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_network_site_to_site_vpn(
    network_id: str = Path(..., alias='networkId'),
    body: NetworksNetworkIdSiteToSiteVpnPutRequest = ...,
):
    """
    Update the site-to-site VPN settings of a network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/networks/{networkId}/sm/bypassActivationLockAttempts',
    description=""" Bypass activation lock attempt """,
    tags=['network_management', 'network_device_management', 'user_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def create_network_sm_bypass_activation_lock_attempt(
    network_id: str = Path(..., alias='networkId'),
    body: NetworksNetworkIdSmBypassActivationLockAttemptsPostRequest = ...,
):
    """
    Bypass activation lock attempt
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/sm/bypassActivationLockAttempts/{attemptId}',
    description=""" Bypass activation lock attempt status """,
    tags=['network_management', 'network_access_policies'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_sm_bypass_activation_lock_attempt(
    network_id: str = Path(..., alias='networkId'),
    attempt_id: str = Path(..., alias='attemptId'),
):
    """
    Bypass activation lock attempt status
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/networks/{networkId}/sm/device/fields',
    description=""" Modify the fields of a device """,
    tags=['network_device_management', 'device_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_network_sm_device_fields(
    network_id: str = Path(..., alias='networkId'),
    body: NetworksNetworkIdSmDeviceFieldsPutRequest = ...,
):
    """
    Modify the fields of a device
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/networks/{networkId}/sm/device/wipe',
    description=""" Wipe a device """,
    tags=['network_device_management', 'device_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def wipe_network_sm_device(
    network_id: str = Path(..., alias='networkId'),
    body: NetworksNetworkIdSmDeviceWipePutRequest = None,
):
    """
    Wipe a device
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/networks/{networkId}/sm/device/{deviceId}/refreshDetails',
    description=""" Refresh the details of a device """,
    tags=['device_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def refresh_network_sm_device_details(
    network_id: str = Path(..., alias='networkId'),
    device_id: str = Path(..., alias='deviceId'),
):
    """
    Refresh the details of a device
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/sm/devices',
    description=""" List the devices enrolled in an SM network with various specified fields and filters """,
    tags=['device_management', 'network_device_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_sm_devices(
    network_id: str = Path(..., alias='networkId'),
    fields: Optional[str] = None,
    wifi_macs: Optional[str] = Query(None, alias='wifiMacs'),
    serials: Optional[str] = None,
    ids: Optional[str] = None,
    scope: Optional[str] = None,
    batch_size: Optional[int] = Query(None, alias='batchSize'),
    batch_token: Optional[str] = Query(None, alias='batchToken'),
):
    """
    List the devices enrolled in an SM network with various specified fields and filters
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/networks/{networkId}/sm/devices/checkin',
    description=""" Force check-in a set of devices """,
    tags=['network_device_management', 'client_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def checkin_network_sm_devices(
    network_id: str = Path(..., alias='networkId'),
    body: NetworksNetworkIdSmDevicesCheckinPutRequest = None,
):
    """
    Force check-in a set of devices
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/networks/{networkId}/sm/devices/tags',
    description=""" Add, delete, or update the tags of a set of devices """,
    tags=['network_device_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_network_sm_devices_tags(
    network_id: str = Path(..., alias='networkId'),
    body: NetworksNetworkIdSmDevicesTagsPutRequest = ...,
):
    """
    Add, delete, or update the tags of a set of devices
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/networks/{networkId}/sm/devices/{deviceId}/unenroll',
    description=""" Unenroll a device """,
    tags=['network_device_management', 'device_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def unenroll_network_sm_device(
    network_id: str = Path(..., alias='networkId'),
    device_id: str = Path(..., alias='deviceId'),
):
    """
    Unenroll a device
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/sm/profiles',
    description=""" List all the profiles in the network """,
    tags=[
        'client_management',
        'network_management',
        'profile_management',
        'network_client_management',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_sm_profiles(network_id: str = Path(..., alias='networkId')):
    """
    List all the profiles in the network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/sm/targetGroups',
    description=""" List the target groups in this network """,
    tags=['network_management', 'target_group_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_sm_target_groups(
    network_id: str = Path(..., alias='networkId'),
    with_details: Optional[bool] = Query(None, alias='withDetails'),
):
    """
    List the target groups in this network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/networks/{networkId}/sm/targetGroups',
    description=""" Add a target group """,
    tags=['target_group_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def create_network_sm_target_group(
    network_id: str = Path(..., alias='networkId'),
    body: NetworksNetworkIdSmTargetGroupsPostRequest = None,
):
    """
    Add a target group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/networks/{networkId}/sm/targetGroups/{targetGroupId}',
    description=""" Delete a target group from a network """,
    tags=['target_group_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def delete_network_sm_target_group(
    network_id: str = Path(..., alias='networkId'),
    target_group_id: str = Path(..., alias='targetGroupId'),
):
    """
    Delete a target group from a network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/sm/targetGroups/{targetGroupId}',
    description=""" Return a target group """,
    tags=['target_group_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_sm_target_group(
    network_id: str = Path(..., alias='networkId'),
    target_group_id: str = Path(..., alias='targetGroupId'),
    with_details: Optional[bool] = Query(None, alias='withDetails'),
):
    """
    Return a target group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/networks/{networkId}/sm/targetGroups/{targetGroupId}',
    description=""" Update a target group """,
    tags=['target_group_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_network_sm_target_group(
    network_id: str = Path(..., alias='networkId'),
    target_group_id: str = Path(..., alias='targetGroupId'),
    body: NetworksNetworkIdSmTargetGroupsTargetGroupIdPutRequest = None,
):
    """
    Update a target group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/sm/user/{userId}/deviceProfiles',
    description=""" Get the profiles associated with a user """,
    tags=['profile_management', 'user_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_sm_user_device_profiles(
    network_id: str = Path(..., alias='networkId'),
    user_id: str = Path(..., alias='userId'),
):
    """
    Get the profiles associated with a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/sm/user/{userId}/softwares',
    description=""" Get a list of softwares associated with a user """,
    tags=['user_management', 'network_client_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_sm_user_softwares(
    network_id: str = Path(..., alias='networkId'),
    user_id: str = Path(..., alias='userId'),
):
    """
    Get a list of softwares associated with a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/sm/users',
    description=""" List the owners in an SM network with various specified fields and filters """,
    tags=['network_management', 'network_client_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_sm_users(
    network_id: str = Path(..., alias='networkId'),
    ids: Optional[str] = None,
    usernames: Optional[str] = None,
    emails: Optional[str] = None,
    scope: Optional[str] = None,
):
    """
    List the owners in an SM network with various specified fields and filters
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/sm/{deviceId}/cellularUsageHistory',
    description=""" Return the client's daily cellular data usage history. Usage data is in kilobytes. """,
    tags=['network_usage_monitoring', 'network_client_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_sm_cellular_usage_history(
    network_id: str = Path(..., alias='networkId'),
    device_id: str = Path(..., alias='deviceId'),
):
    """
    Return the client's daily cellular data usage history
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/sm/{deviceId}/certs',
    description=""" List the certs on a device """,
    tags=[
        'device_management',
        'network_device_management',
        'network_security_management',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_sm_certs(
    network_id: str = Path(..., alias='networkId'),
    device_id: str = Path(..., alias='deviceId'),
):
    """
    List the certs on a device
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/sm/{deviceId}/deviceProfiles',
    description=""" Get the profiles associated with a device """,
    tags=['network_device_management', 'profile_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_sm_device_profiles(
    network_id: str = Path(..., alias='networkId'),
    device_id: str = Path(..., alias='deviceId'),
):
    """
    Get the profiles associated with a device
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/sm/{deviceId}/networkAdapters',
    description=""" List the network adapters of a device """,
    tags=['network_management', 'network_device_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_sm_network_adapters(
    network_id: str = Path(..., alias='networkId'),
    device_id: str = Path(..., alias='deviceId'),
):
    """
    List the network adapters of a device
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/sm/{deviceId}/restrictions',
    description=""" List the restrictions on a device """,
    tags=['network_device_management', 'network_management', 'device_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_sm_restrictions(
    network_id: str = Path(..., alias='networkId'),
    device_id: str = Path(..., alias='deviceId'),
):
    """
    List the restrictions on a device
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/sm/{deviceId}/securityCenters',
    description=""" List the security centers on a device """,
    tags=['network_security_management', 'device_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_sm_security_centers(
    network_id: str = Path(..., alias='networkId'),
    device_id: str = Path(..., alias='deviceId'),
):
    """
    List the security centers on a device
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/sm/{deviceId}/softwares',
    description=""" Get a list of softwares associated with a device """,
    tags=['device_management', 'network_device_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_sm_softwares(
    network_id: str = Path(..., alias='networkId'),
    device_id: str = Path(..., alias='deviceId'),
):
    """
    Get a list of softwares associated with a device
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/sm/{deviceId}/wlanLists',
    description=""" List the saved SSID names on a device """,
    tags=['network_ssid_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_sm_wlan_lists(
    network_id: str = Path(..., alias='networkId'),
    device_id: str = Path(..., alias='deviceId'),
):
    """
    List the saved SSID names on a device
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/snmpSettings',
    description=""" Return the SNMP settings for a network """,
    tags=['network_management', 'organization_snmp_configuration'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_snmp_settings(network_id: str = Path(..., alias='networkId')):
    """
    Return the SNMP settings for a network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/splashLoginAttempts',
    description=""" List the splash login attempts for a network """,
    tags=['network_usage_monitoring', 'client_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_splash_login_attempts(
    network_id: str = Path(..., alias='networkId'),
    ssid_number: Optional[SsidNumber] = Query(None, alias='ssidNumber'),
    login_identifier: Optional[str] = Query(None, alias='loginIdentifier'),
    timespan: Optional[int] = None,
):
    """
    List the splash login attempts for a network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/networks/{networkId}/split',
    description=""" Split a combined network into individual networks for each type of device """,
    tags=['network_management', 'network_device_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def split_network(network_id: str = Path(..., alias='networkId')):
    """
    Split a combined network into individual networks for each type of device
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/ssids',
    description=""" List the SSIDs in a network. Supports networks with access points or wireless-enabled security appliances and teleworker gateways. """,
    tags=['network_management', 'network_ssid_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_ssids(network_id: str = Path(..., alias='networkId')):
    """
    List the SSIDs in a network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/ssids/{number}',
    description=""" Return a single SSID """,
    tags=['network_ssid_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_ssid(network_id: str = Path(..., alias='networkId'), number: str = ...):
    """
    Return a single SSID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/networks/{networkId}/ssids/{number}',
    description=""" Update the attributes of an SSID """,
    tags=['network_ssid_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_network_ssid(
    network_id: str = Path(..., alias='networkId'),
    number: str = ...,
    body: NetworksNetworkIdSsidsNumberPutRequest = None,
):
    """
    Update the attributes of an SSID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/ssids/{number}/l3FirewallRules',
    description=""" Return the L3 firewall rules for an SSID on an MR network """,
    tags=[
        'firewall_management',
        'network_management',
        'network_firewall_management',
        'network_ssid_management',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_ssid_l3_firewall_rules(
    network_id: str = Path(..., alias='networkId'), number: str = ...
):
    """
    Return the L3 firewall rules for an SSID on an MR network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/networks/{networkId}/ssids/{number}/l3FirewallRules',
    description=""" Update the L3 firewall rules of an SSID on an MR network """,
    tags=[
        'firewall_management',
        'network_management',
        'network_ssid_management',
        'network_firewall_management',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_network_ssid_l3_firewall_rules(
    network_id: str = Path(..., alias='networkId'),
    number: str = ...,
    body: NetworksNetworkIdSsidsNumberL3FirewallRulesPutRequest = None,
):
    """
    Update the L3 firewall rules of an SSID on an MR network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/ssids/{number}/splashSettings',
    description=""" Display the splash page settings for the given SSID """,
    tags=['splash_page_settings', 'network_ssid_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_ssid_splash_settings(
    network_id: str = Path(..., alias='networkId'), number: str = ...
):
    """
    Display the splash page settings for the given SSID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/networks/{networkId}/ssids/{number}/splashSettings',
    description=""" Modify the splash page settings for the given SSID """,
    tags=['network_ssid_management', 'splash_page_settings'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_network_ssid_splash_settings(
    network_id: str = Path(..., alias='networkId'),
    number: str = ...,
    body: NetworksNetworkIdSsidsNumberSplashSettingsPutRequest = None,
):
    """
    Modify the splash page settings for the given SSID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/staticRoutes',
    description=""" List the static routes for an MX or teleworker network """,
    tags=['static_route_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_static_routes(network_id: str = Path(..., alias='networkId')):
    """
    List the static routes for an MX or teleworker network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/networks/{networkId}/staticRoutes',
    description=""" Add a static route for an MX or teleworker network """,
    tags=['static_route_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def create_network_static_route(
    network_id: str = Path(..., alias='networkId'),
    body: NetworksNetworkIdStaticRoutesPostRequest = ...,
):
    """
    Add a static route for an MX or teleworker network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/networks/{networkId}/staticRoutes/{staticRouteId}',
    description=""" Delete a static route from an MX or teleworker network """,
    tags=['static_route_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def delete_network_static_route(
    network_id: str = Path(..., alias='networkId'),
    static_route_id: str = Path(..., alias='staticRouteId'),
):
    """
    Delete a static route from an MX or teleworker network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/staticRoutes/{staticRouteId}',
    description=""" Return a static route for an MX or teleworker network """,
    tags=['static_route_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_static_route(
    network_id: str = Path(..., alias='networkId'),
    static_route_id: str = Path(..., alias='staticRouteId'),
):
    """
    Return a static route for an MX or teleworker network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/networks/{networkId}/staticRoutes/{staticRouteId}',
    description=""" Update a static route for an MX or teleworker network """,
    tags=['static_route_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_network_static_route(
    network_id: str = Path(..., alias='networkId'),
    static_route_id: str = Path(..., alias='staticRouteId'),
    body: NetworksNetworkIdStaticRoutesStaticRouteIdPutRequest = None,
):
    """
    Update a static route for an MX or teleworker network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/networks/{networkId}/swapWarmSpare',
    description=""" Swap MX primary and warm spare appliances """,
    tags=['warm_spare_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def swap_network_warm_spare(network_id: str = Path(..., alias='networkId')):
    """
    Swap MX primary and warm spare appliances
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/switch/linkAggregations',
    description=""" List link aggregation groups """,
    tags=['link_aggregation_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_switch_link_aggregations(
    network_id: str = Path(..., alias='networkId')
):
    """
    List link aggregation groups
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/networks/{networkId}/switch/linkAggregations',
    description=""" Create a link aggregation group """,
    tags=['link_aggregation_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def create_network_switch_link_aggregation(
    network_id: str = Path(..., alias='networkId'),
    body: NetworksNetworkIdSwitchLinkAggregationsPostRequest = None,
):
    """
    Create a link aggregation group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/networks/{networkId}/switch/linkAggregations/{linkAggregationId}',
    description=""" Split a link aggregation group into separate ports """,
    tags=[
        'link_aggregation_management',
        'switch_port_management',
        'network_management',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def delete_network_switch_link_aggregation(
    network_id: str = Path(..., alias='networkId'),
    link_aggregation_id: str = Path(..., alias='linkAggregationId'),
):
    """
    Split a link aggregation group into separate ports
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/networks/{networkId}/switch/linkAggregations/{linkAggregationId}',
    description=""" Update a link aggregation group """,
    tags=['link_aggregation_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_network_switch_link_aggregation(
    network_id: str = Path(..., alias='networkId'),
    link_aggregation_id: str = Path(..., alias='linkAggregationId'),
    body: NetworksNetworkIdSwitchLinkAggregationsLinkAggregationIdPutRequest = None,
):
    """
    Update a link aggregation group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/switch/portSchedules',
    description=""" List switch port schedules """,
    tags=['switch_port_management', 'port_schedule_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_switch_port_schedules(network_id: str = Path(..., alias='networkId')):
    """
    List switch port schedules
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/networks/{networkId}/switch/portSchedules',
    description=""" Add a switch port schedule """,
    tags=['switch_port_management', 'port_schedule_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def create_network_switch_port_schedule(
    network_id: str = Path(..., alias='networkId'),
    body: NetworksNetworkIdSwitchPortSchedulesPostRequest = ...,
):
    """
    Add a switch port schedule
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/networks/{networkId}/switch/portSchedules/{portScheduleId}',
    description=""" Delete a switch port schedule """,
    tags=['switch_port_management', 'port_schedule_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def delete_network_switch_port_schedule(
    network_id: str = Path(..., alias='networkId'),
    port_schedule_id: str = Path(..., alias='portScheduleId'),
):
    """
    Delete a switch port schedule
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/networks/{networkId}/switch/portSchedules/{portScheduleId}',
    description=""" Update a switch port schedule """,
    tags=['switch_port_management', 'port_schedule_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_network_switch_port_schedule(
    network_id: str = Path(..., alias='networkId'),
    port_schedule_id: str = Path(..., alias='portScheduleId'),
    body: NetworksNetworkIdSwitchPortSchedulesPortScheduleIdPutRequest = None,
):
    """
    Update a switch port schedule
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/switch/settings',
    description=""" Returns the switch network settings """,
    tags=['switch_network_settings', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_switch_settings(network_id: str = Path(..., alias='networkId')):
    """
    Returns the switch network settings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/networks/{networkId}/switch/settings',
    description=""" Update switch network settings """,
    tags=['switch_network_settings', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_network_switch_settings(
    network_id: str = Path(..., alias='networkId'),
    body: NetworksNetworkIdSwitchSettingsPutRequest = None,
):
    """
    Update switch network settings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/switch/settings/mtu',
    description=""" Return the MTU configuration """,
    tags=['switch_network_settings', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_switch_settings_mtu(network_id: str = Path(..., alias='networkId')):
    """
    Return the MTU configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/networks/{networkId}/switch/settings/mtu',
    description=""" Update the MTU configuration """,
    tags=['switch_network_settings', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_network_switch_settings_mtu(
    network_id: str = Path(..., alias='networkId'),
    body: NetworksNetworkIdSwitchSettingsMtuPutRequest = None,
):
    """
    Update the MTU configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/switch/settings/multicast',
    description=""" Return multicast settings for a network """,
    tags=['network_management', 'switch_network_settings'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_switch_settings_multicast(
    network_id: str = Path(..., alias='networkId')
):
    """
    Return multicast settings for a network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/networks/{networkId}/switch/settings/multicast',
    description=""" Update multicast settings for a network """,
    tags=['network_management', 'switch_network_settings'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_network_switch_settings_multicast(
    network_id: str = Path(..., alias='networkId'),
    body: NetworksNetworkIdSwitchSettingsMulticastPutRequest = None,
):
    """
    Update multicast settings for a network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/switch/settings/qosRules',
    description=""" List quality of service rules """,
    tags=['network_management', 'network_access_policies', 'qos_rule_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_switch_settings_qos_rules(
    network_id: str = Path(..., alias='networkId')
):
    """
    List quality of service rules
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/networks/{networkId}/switch/settings/qosRules',
    description=""" Add a quality of service rule """,
    tags=['qos_rule_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def create_network_switch_settings_qos_rule(
    network_id: str = Path(..., alias='networkId'),
    body: NetworksNetworkIdSwitchSettingsQosRulesPostRequest = ...,
):
    """
    Add a quality of service rule
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/switch/settings/qosRules/order',
    description=""" Return the quality of service rule IDs by order in which they will be processed by the switch """,
    tags=['network_access_policies', 'qos_rule_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_switch_settings_qos_rules_order(
    network_id: str = Path(..., alias='networkId')
):
    """
    Return the quality of service rule IDs by order in which they will be processed by the switch
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/networks/{networkId}/switch/settings/qosRules/order',
    description=""" Update the order in which the rules should be processed by the switch """,
    tags=['qos_rule_management', 'network_management', 'switch_port_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_network_switch_settings_qos_rules_order(
    network_id: str = Path(..., alias='networkId'),
    body: NetworksNetworkIdSwitchSettingsQosRulesOrderPutRequest = ...,
):
    """
    Update the order in which the rules should be processed by the switch
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/networks/{networkId}/switch/settings/qosRules/{qosRuleId}',
    description=""" Delete a quality of service rule """,
    tags=['qos_rule_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def delete_network_switch_settings_qos_rule(
    network_id: str = Path(..., alias='networkId'),
    qos_rule_id: str = Path(..., alias='qosRuleId'),
):
    """
    Delete a quality of service rule
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/switch/settings/qosRules/{qosRuleId}',
    description=""" Return a quality of service rule """,
    tags=['qos_rule_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_switch_settings_qos_rule(
    network_id: str = Path(..., alias='networkId'),
    qos_rule_id: str = Path(..., alias='qosRuleId'),
):
    """
    Return a quality of service rule
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/networks/{networkId}/switch/settings/qosRules/{qosRuleId}',
    description=""" Update a quality of service rule """,
    tags=['qos_rule_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_network_switch_settings_qos_rule(
    network_id: str = Path(..., alias='networkId'),
    qos_rule_id: str = Path(..., alias='qosRuleId'),
    body: NetworksNetworkIdSwitchSettingsQosRulesQosRuleIdPutRequest = None,
):
    """
    Update a quality of service rule
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/switch/settings/stormControl',
    description=""" Return the storm control configuration for a switch network """,
    tags=['storm_control_settings', 'network_management', 'switch_network_settings'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_switch_settings_storm_control(
    network_id: str = Path(..., alias='networkId')
):
    """
    Return the storm control configuration for a switch network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/networks/{networkId}/switch/settings/stormControl',
    description=""" Update the storm control configuration for a switch network """,
    tags=['storm_control_settings', 'network_management', 'switch_network_settings'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_network_switch_settings_storm_control(
    network_id: str = Path(..., alias='networkId'),
    body: NetworksNetworkIdSwitchSettingsStormControlPutRequest = None,
):
    """
    Update the storm control configuration for a switch network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/switchStacks',
    description=""" List the switch stacks in a network """,
    tags=['switch_stack_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_switch_stacks(network_id: str = Path(..., alias='networkId')):
    """
    List the switch stacks in a network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/networks/{networkId}/switchStacks',
    description=""" Create a stack """,
    tags=['switch_stack_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def create_network_switch_stack(
    network_id: str = Path(..., alias='networkId'),
    body: NetworksNetworkIdSwitchStacksPostRequest = ...,
):
    """
    Create a stack
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/networks/{networkId}/switchStacks/{switchStackId}',
    description=""" Delete a stack """,
    tags=['switch_stack_management', 'network_device_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def delete_network_switch_stack(
    network_id: str = Path(..., alias='networkId'),
    switch_stack_id: str = Path(..., alias='switchStackId'),
):
    """
    Delete a stack
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/switchStacks/{switchStackId}',
    description=""" Show a switch stack """,
    tags=['switch_stack_management', 'network_device_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_switch_stack(
    network_id: str = Path(..., alias='networkId'),
    switch_stack_id: str = Path(..., alias='switchStackId'),
):
    """
    Show a switch stack
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/networks/{networkId}/switchStacks/{switchStackId}/add',
    description=""" Add a switch to a stack """,
    tags=['switch_stack_management', 'network_device_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def add_network_switch_stack(
    network_id: str = Path(..., alias='networkId'),
    switch_stack_id: str = Path(..., alias='switchStackId'),
    body: NetworksNetworkIdSwitchStacksSwitchStackIdAddPostRequest = ...,
):
    """
    Add a switch to a stack
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/networks/{networkId}/switchStacks/{switchStackId}/remove',
    description=""" Remove a switch from a stack """,
    tags=['network_device_management', 'switch_stack_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def remove_network_switch_stack(
    network_id: str = Path(..., alias='networkId'),
    switch_stack_id: str = Path(..., alias='switchStackId'),
    body: NetworksNetworkIdSwitchStacksSwitchStackIdRemovePostRequest = ...,
):
    """
    Remove a switch from a stack
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/syslogServers',
    description=""" List the syslog servers for a network """,
    tags=['network_syslog_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_syslog_servers(network_id: str = Path(..., alias='networkId')):
    """
    List the syslog servers for a network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/networks/{networkId}/syslogServers',
    description=""" Update the syslog servers for a network """,
    tags=['network_syslog_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_network_syslog_servers(
    network_id: str = Path(..., alias='networkId'),
    body: NetworksNetworkIdSyslogServersPutRequest = ...,
):
    """
    Update the syslog servers for a network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/traffic',
    description=""" Return the traffic analysis data for this network. Traffic analysis with hostname visibility must be enabled on the network. """,
    tags=[
        'network_traffic_analysis',
        'network_management',
        'network_connectivity_stats',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_traffic(
    network_id: str = Path(..., alias='networkId'),
    t0: Optional[str] = None,
    timespan: Optional[float] = None,
    device_type: Optional[DeviceType] = Query(None, alias='deviceType'),
):
    """
    Return the traffic analysis data for this network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/networks/{networkId}/unbind',
    description=""" Unbind a network from a template. """,
    tags=['network_management', 'network_access_policies'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def unbind_network(network_id: str = Path(..., alias='networkId')):
    """
    Unbind a network from a template.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/uplinkSettings',
    description=""" Returns the uplink settings for your MX network. """,
    tags=['network_uplink_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_uplink_settings(network_id: str = Path(..., alias='networkId')):
    """
    Returns the uplink settings for your MX network.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/networks/{networkId}/uplinkSettings',
    description=""" Updates the uplink settings for your MX network. """,
    tags=['network_uplink_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_network_uplink_settings(
    network_id: str = Path(..., alias='networkId'),
    body: NetworksNetworkIdUplinkSettingsPutRequest = None,
):
    """
    Updates the uplink settings for your MX network.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/vlans',
    description=""" List the VLANs for an MX network """,
    tags=['vlan_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_vlans(network_id: str = Path(..., alias='networkId')):
    """
    List the VLANs for an MX network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/networks/{networkId}/vlans',
    description=""" Add a VLAN """,
    tags=['vlan_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def create_network_vlan(
    network_id: str = Path(..., alias='networkId'),
    body: NetworksNetworkIdVlansPostRequest = ...,
):
    """
    Add a VLAN
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/networks/{networkId}/vlans/{vlanId}',
    description=""" Delete a VLAN from a network """,
    tags=['vlan_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def delete_network_vlan(
    network_id: str = Path(..., alias='networkId'),
    vlan_id: str = Path(..., alias='vlanId'),
):
    """
    Delete a VLAN from a network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/vlans/{vlanId}',
    description=""" Return a VLAN """,
    tags=['vlan_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_vlan(
    network_id: str = Path(..., alias='networkId'),
    vlan_id: str = Path(..., alias='vlanId'),
):
    """
    Return a VLAN
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/networks/{networkId}/vlans/{vlanId}',
    description=""" Update a VLAN """,
    tags=['vlan_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_network_vlan(
    network_id: str = Path(..., alias='networkId'),
    vlan_id: str = Path(..., alias='vlanId'),
    body: NetworksNetworkIdVlansVlanIdPutRequest = None,
):
    """
    Update a VLAN
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/vlansEnabledState',
    description=""" Returns the enabled status of VLANs for the network """,
    tags=['network_management', 'vlan_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_vlans_enabled_state(network_id: str = Path(..., alias='networkId')):
    """
    Returns the enabled status of VLANs for the network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/networks/{networkId}/vlansEnabledState',
    description=""" Enable/Disable VLANs for the given network """,
    tags=['vlan_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_network_vlans_enabled_state(
    network_id: str = Path(..., alias='networkId'),
    body: NetworksNetworkIdVlansEnabledStatePutRequest = ...,
):
    """
    Enable/Disable VLANs for the given network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/warmSpareSettings',
    description=""" Return MX warm spare settings """,
    tags=['warm_spare_management', 'network_warm_spare_settings'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_warm_spare_settings(network_id: str = Path(..., alias='networkId')):
    """
    Return MX warm spare settings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/networks/{networkId}/warmSpareSettings',
    description=""" Update MX warm spare settings """,
    tags=['warm_spare_management', 'network_warm_spare_settings'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_network_warm_spare_settings(
    network_id: str = Path(..., alias='networkId'),
    body: NetworksNetworkIdWarmSpareSettingsPutRequest = ...,
):
    """
    Update MX warm spare settings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/wireless/rfProfiles',
    description=""" List the non-basic RF profiles for this network """,
    tags=['network_rf_profile_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_wireless_rf_profiles(
    network_id: str = Path(..., alias='networkId'),
    include_template_profiles: Optional[bool] = Query(
        None, alias='includeTemplateProfiles'
    ),
):
    """
    List the non-basic RF profiles for this network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/networks/{networkId}/wireless/rfProfiles',
    description=""" Creates new RF profile for this network """,
    tags=['network_rf_profile_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def create_network_wireless_rf_profile(
    network_id: str = Path(..., alias='networkId'),
    body: NetworksNetworkIdWirelessRfProfilesPostRequest = ...,
):
    """
    Creates new RF profile for this network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/networks/{networkId}/wireless/rfProfiles/{rfProfileId}',
    description=""" Delete a RF Profile """,
    tags=['network_rf_profile_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def delete_network_wireless_rf_profile(
    network_id: str = Path(..., alias='networkId'),
    rf_profile_id: str = Path(..., alias='rfProfileId'),
):
    """
    Delete a RF Profile
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/wireless/rfProfiles/{rfProfileId}',
    description=""" Return a RF profile """,
    tags=['network_rf_profile_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_wireless_rf_profile(
    network_id: str = Path(..., alias='networkId'),
    rf_profile_id: str = Path(..., alias='rfProfileId'),
):
    """
    Return a RF profile
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/networks/{networkId}/wireless/rfProfiles/{rfProfileId}',
    description=""" Updates specified RF profile for this network """,
    tags=['network_rf_profile_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_network_wireless_rf_profile(
    network_id: str = Path(..., alias='networkId'),
    rf_profile_id: str = Path(..., alias='rfProfileId'),
    body: NetworksNetworkIdWirelessRfProfilesRfProfileIdPutRequest = None,
):
    """
    Updates specified RF profile for this network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{networkId}/wireless/settings',
    description=""" Return the wireless settings for a network """,
    tags=['network_wireless_settings_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_wireless_settings(network_id: str = Path(..., alias='networkId')):
    """
    Return the wireless settings for a network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/networks/{networkId}/wireless/settings',
    description=""" Update the wireless settings for a network """,
    tags=['network_wireless_settings_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_network_wireless_settings(
    network_id: str = Path(..., alias='networkId'),
    body: NetworksNetworkIdWirelessSettingsPutRequest = None,
):
    """
    Update the wireless settings for a network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/networks/{network_id}/sm/devices/lock',
    description=""" Lock a set of devices """,
    tags=['device_lock_management', 'network_device_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def lock_network_sm_devices(
    network_id: str, body: NetworksNetworkIdSmDevicesLockPutRequest = None
):
    """
    Lock a set of devices
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{network_id}/sm/{id}/connectivity',
    description=""" Returns historical connectivity data (whether a device is regularly checking in to Dashboard). """,
    tags=[
        'network_management',
        'network_connectivity_stats',
        'network_device_statistics',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_sm_connectivity(
    network_id: str,
    id: str = ...,
    per_page: Optional[int] = Query(None, alias='perPage'),
    starting_after: Optional[str] = Query(None, alias='startingAfter'),
    ending_before: Optional[str] = Query(None, alias='endingBefore'),
):
    """
    Returns historical connectivity data (whether a device is regularly checking in to Dashboard).
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{network_id}/sm/{id}/desktopLogs',
    description=""" Return historical records of various Systems Manager network connection details for desktop devices. """,
    tags=[
        'network_management',
        'client_management',
        'network_device_management',
        'network_device_statistics',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_sm_desktop_logs(
    network_id: str,
    id: str = ...,
    per_page: Optional[int] = Query(None, alias='perPage'),
    starting_after: Optional[str] = Query(None, alias='startingAfter'),
    ending_before: Optional[str] = Query(None, alias='endingBefore'),
):
    """
    Return historical records of various Systems Manager network connection details for desktop devices.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{network_id}/sm/{id}/deviceCommandLogs',
    description=""" Return historical records of commands sent to Systems Manager devices. Note that this will include the name of the Dashboard user who initiated the command if it was generated by a Dashboard admin rather than the automatic behavior of the system; you may wish to filter this out of any reports. """,
    tags=[
        'network_event_management',
        'network_device_management',
        'network_management',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_sm_device_command_logs(
    network_id: str,
    id: str = ...,
    per_page: Optional[int] = Query(None, alias='perPage'),
    starting_after: Optional[str] = Query(None, alias='startingAfter'),
    ending_before: Optional[str] = Query(None, alias='endingBefore'),
):
    """
    Return historical records of commands sent to Systems Manager devices
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/networks/{network_id}/sm/{id}/performanceHistory',
    description=""" Return historical records of various Systems Manager client metrics for desktop devices. """,
    tags=[
        'network_device_statistics',
        'client_management',
        'network_client_management',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_network_sm_performance_history(
    network_id: str,
    id: str = ...,
    per_page: Optional[int] = Query(None, alias='perPage'),
    starting_after: Optional[str] = Query(None, alias='startingAfter'),
    ending_before: Optional[str] = Query(None, alias='endingBefore'),
):
    """
    Return historical records of various Systems Manager client metrics for desktop devices.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/organizations',
    description=""" List the organizations that the user has privileges on """,
    tags=[
        'organization_management',
        'organization_admins',
        'organization_general_info',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_organizations():
    """
    List the organizations that the user has privileges on
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/organizations/{organizationId}',
    description=""" Return an organization """,
    tags=['organization_management', 'organization_general_info'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_organization(organization_id: str = Path(..., alias='organizationId')):
    """
    Return an organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/organizations/{organizationId}/actionBatches',
    description=""" Return the list of action batches in the organization """,
    tags=['organization_management', 'organization_network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_organization_action_batches(
    organization_id: str = Path(..., alias='organizationId'),
    status: Optional[Status1] = None,
):
    """
    Return the list of action batches in the organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/organizations/{organizationId}/actionBatches',
    description=""" Create an action batch """,
    tags=['organization_management', 'organization_network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def create_organization_action_batch(
    organization_id: str = Path(..., alias='organizationId'),
    body: OrganizationsOrganizationIdActionBatchesPostRequest = ...,
):
    """
    Create an action batch
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/organizations/{organizationId}/actionBatches/{actionBatchId}',
    description=""" Delete an action batch """,
    tags=['organization_management', 'organization_network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def delete_organization_action_batch(
    organization_id: str = Path(..., alias='organizationId'),
    action_batch_id: str = Path(..., alias='actionBatchId'),
):
    """
    Delete an action batch
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/organizations/{organizationId}/actionBatches/{actionBatchId}',
    description=""" Update an action batch """,
    tags=['organization_management', 'organization_network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_organization_action_batch(
    organization_id: str = Path(..., alias='organizationId'),
    action_batch_id: str = Path(..., alias='actionBatchId'),
    body: OrganizationsOrganizationIdActionBatchesActionBatchIdPutRequest = None,
):
    """
    Update an action batch
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/organizations/{organizationId}/admins',
    description=""" List the dashboard administrators in this organization """,
    tags=['organization_admins', 'organization_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_organization_admins(organization_id: str = Path(..., alias='organizationId')):
    """
    List the dashboard administrators in this organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/organizations/{organizationId}/admins',
    description=""" Create a new dashboard administrator """,
    tags=['organization_management', 'organization_admins'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def create_organization_admin(
    organization_id: str = Path(..., alias='organizationId'),
    body: OrganizationsOrganizationIdAdminsPostRequest = ...,
):
    """
    Create a new dashboard administrator
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/organizations/{organizationId}/admins/{adminId}',
    description=""" Revoke all access for a dashboard administrator within this organization """,
    tags=['organization_management', 'organization_admins'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def delete_organization_admin(
    organization_id: str = Path(..., alias='organizationId'),
    admin_id: str = Path(..., alias='adminId'),
):
    """
    Revoke all access for a dashboard administrator within this organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/organizations/{organizationId}/admins/{adminId}',
    description=""" Update an administrator """,
    tags=['organization_management', 'organization_admins'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_organization_admin(
    organization_id: str = Path(..., alias='organizationId'),
    admin_id: str = Path(..., alias='adminId'),
    body: OrganizationsOrganizationIdAdminsAdminIdPutRequest = None,
):
    """
    Update an administrator
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/organizations/{organizationId}/apiRequests',
    description=""" List the API requests made by an organization """,
    tags=['organization_api_requests'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_organization_api_requests(
    organization_id: str = Path(..., alias='organizationId'),
    t0: Optional[str] = None,
    t1: Optional[str] = None,
    timespan: Optional[float] = None,
    per_page: Optional[int] = Query(None, alias='perPage'),
    starting_after: Optional[str] = Query(None, alias='startingAfter'),
    ending_before: Optional[str] = Query(None, alias='endingBefore'),
    admin_id: Optional[str] = Query(None, alias='adminId'),
    path: Optional[str] = None,
    method: Optional[str] = None,
    response_code: Optional[int] = Query(None, alias='responseCode'),
    source_ip: Optional[str] = Query(None, alias='sourceIp'),
):
    """
    List the API requests made by an organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/organizations/{organizationId}/apiRequests/overview',
    description=""" Return an aggregated overview of API requests data """,
    tags=['organization_api_requests'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_organization_api_requests_overview(
    organization_id: str = Path(..., alias='organizationId'),
    t0: Optional[str] = None,
    t1: Optional[str] = None,
    timespan: Optional[float] = None,
):
    """
    Return an aggregated overview of API requests data
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/organizations/{organizationId}/claim',
    description=""" Claim a list of devices, licenses, and/or orders into an organization. When claiming by order, all devices and licenses in the order will be claimed; licenses will be added to the organization and devices will be placed in the organization's inventory. """,
    tags=[
        'organization_management',
        'device_inventory_management',
        'organization_license_management',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def claim_into_organization(
    organization_id: str = Path(..., alias='organizationId'),
    body: OrganizationsOrganizationIdClaimPostRequest = None,
):
    """
    Claim a list of devices, licenses, and/or orders into an organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/organizations/{organizationId}/clone',
    description=""" Create a new organization by cloning the addressed organization """,
    tags=['organization_management', 'organization_network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def clone_organization(
    organization_id: str = Path(..., alias='organizationId'),
    body: OrganizationsOrganizationIdClonePostRequest = ...,
):
    """
    Create a new organization by cloning the addressed organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/organizations/{organizationId}/configTemplates',
    description=""" List the configuration templates for this organization """,
    tags=['organization_management', 'organization_general_info'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_organization_config_templates(
    organization_id: str = Path(..., alias='organizationId')
):
    """
    List the configuration templates for this organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/organizations/{organizationId}/configTemplates/{configTemplateId}',
    description=""" Remove a configuration template """,
    tags=['organization_management', 'organization_network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def delete_organization_config_template(
    organization_id: str = Path(..., alias='organizationId'),
    config_template_id: str = Path(..., alias='configTemplateId'),
):
    """
    Remove a configuration template
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/organizations/{organizationId}/configTemplates/{configTemplateId}/switchProfiles',
    description=""" List the switch profiles for your switch template configuration """,
    tags=[
        'switch_stack_management',
        'switch_port_management',
        'network_device_management',
        'organization_management',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_organization_config_template_switch_profiles(
    organization_id: str = Path(..., alias='organizationId'),
    config_template_id: str = Path(..., alias='configTemplateId'),
):
    """
    List the switch profiles for your switch template configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/organizations/{organizationId}/configurationChanges',
    description=""" View the Change Log for your organization """,
    tags=[
        'organization_management',
        'organization_general_info',
        'organization_api_requests',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_organization_configuration_changes(
    organization_id: str = Path(..., alias='organizationId'),
    t0: Optional[str] = None,
    t1: Optional[str] = None,
    timespan: Optional[float] = None,
    per_page: Optional[int] = Query(None, alias='perPage'),
    starting_after: Optional[str] = Query(None, alias='startingAfter'),
    ending_before: Optional[str] = Query(None, alias='endingBefore'),
    network_id: Optional[str] = Query(None, alias='networkId'),
    admin_id: Optional[str] = Query(None, alias='adminId'),
):
    """
    View the Change Log for your organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/organizations/{organizationId}/deviceStatuses',
    description=""" List the status of every Meraki device in the organization """,
    tags=[
        'network_device_management',
        'organization_management',
        'device_inventory_management',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_organization_device_statuses(
    organization_id: str = Path(..., alias='organizationId')
):
    """
    List the status of every Meraki device in the organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/organizations/{organizationId}/devices',
    description=""" List the devices in an organization """,
    tags=[
        'device_management',
        'device_inventory_management',
        'organization_management',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_organization_devices(
    organization_id: str = Path(..., alias='organizationId'),
    per_page: Optional[int] = Query(None, alias='perPage'),
    starting_after: Optional[str] = Query(None, alias='startingAfter'),
    ending_before: Optional[str] = Query(None, alias='endingBefore'),
    configuration_updated_after: Optional[str] = Query(
        None, alias='configurationUpdatedAfter'
    ),
):
    """
    List the devices in an organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/organizations/{organizationId}/insight/monitoredMediaServers',
    description=""" List the monitored media servers for this organization. Only valid for organizations with Meraki Insight. """,
    tags=['media_server_monitoring', 'organization_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_organization_insight_monitored_media_servers(
    organization_id: str = Path(..., alias='organizationId')
):
    """
    List the monitored media servers for this organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/organizations/{organizationId}/insight/monitoredMediaServers',
    description=""" Add a media server to be monitored for this organization. Only valid for organizations with Meraki Insight. """,
    tags=['media_server_monitoring', 'organization_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def create_organization_insight_monitored_media_server(
    organization_id: str = Path(..., alias='organizationId'),
    body: OrganizationsOrganizationIdInsightMonitoredMediaServersPostRequest = ...,
):
    """
    Add a media server to be monitored for this organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/organizations/{organizationId}/insight/monitoredMediaServers/{monitoredMediaServerId}',
    description=""" Delete a monitored media server from this organization. Only valid for organizations with Meraki Insight. """,
    tags=['media_server_monitoring', 'organization_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def delete_organization_insight_monitored_media_server(
    organization_id: str = Path(..., alias='organizationId'),
    monitored_media_server_id: str = Path(..., alias='monitoredMediaServerId'),
):
    """
    Delete a monitored media server from this organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/organizations/{organizationId}/insight/monitoredMediaServers/{monitoredMediaServerId}',
    description=""" Return a monitored media server for this organization. Only valid for organizations with Meraki Insight. """,
    tags=['media_server_monitoring', 'organization_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_organization_insight_monitored_media_server(
    organization_id: str = Path(..., alias='organizationId'),
    monitored_media_server_id: str = Path(..., alias='monitoredMediaServerId'),
):
    """
    Return a monitored media server for this organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/organizations/{organizationId}/insight/monitoredMediaServers/{monitoredMediaServerId}',
    description=""" Update a monitored media server for this organization. Only valid for organizations with Meraki Insight. """,
    tags=['media_server_monitoring', 'organization_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_organization_insight_monitored_media_server(
    organization_id: str = Path(..., alias='organizationId'),
    monitored_media_server_id: str = Path(..., alias='monitoredMediaServerId'),
    body: OrganizationsOrganizationIdInsightMonitoredMediaServersMonitoredMediaServerIdPutRequest = None,
):
    """
    Update a monitored media server for this organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/organizations/{organizationId}/inventory',
    description=""" Return the inventory for an organization """,
    tags=[
        'organization_management',
        'device_inventory_management',
        'organization_general_info',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_organization_inventory(
    organization_id: str = Path(..., alias='organizationId'),
    include_license_info: Optional[bool] = Query(None, alias='includeLicenseInfo'),
):
    """
    Return the inventory for an organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/organizations/{organizationId}/licenseState',
    description=""" Return an overview of the license state for an organization """,
    tags=[
        'organization_license_management',
        'organization_management',
        'organization_general_info',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_organization_license_state(
    organization_id: str = Path(..., alias='organizationId')
):
    """
    Return an overview of the license state for an organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/organizations/{organizationId}/licenses',
    description=""" List the licenses for an organization """,
    tags=['organization_license_management', 'organization_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_organization_licenses(
    organization_id: str = Path(..., alias='organizationId'),
    per_page: Optional[int] = Query(None, alias='perPage'),
    starting_after: Optional[str] = Query(None, alias='startingAfter'),
    ending_before: Optional[str] = Query(None, alias='endingBefore'),
    device_serial: Optional[str] = Query(None, alias='deviceSerial'),
    network_id: Optional[str] = Query(None, alias='networkId'),
    state: Optional[State] = None,
):
    """
    List the licenses for an organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/organizations/{organizationId}/licenses/assignSeats',
    description=""" Assign SM seats to a network. This will increase the managed SM device limit of the network """,
    tags=['organization_license_management', 'organization_network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def assign_organization_licenses_seats(
    organization_id: str = Path(..., alias='organizationId'),
    body: OrganizationsOrganizationIdLicensesAssignSeatsPostRequest = ...,
):
    """
    Assign SM seats to a network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/organizations/{organizationId}/licenses/moveSeats',
    description=""" Move SM seats to another organization """,
    tags=['organization_management', 'organization_license_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def move_organization_licenses_seats(
    organization_id: str = Path(..., alias='organizationId'),
    body: OrganizationsOrganizationIdLicensesMoveSeatsPostRequest = ...,
):
    """
    Move SM seats to another organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/organizations/{organizationId}/licenses/renewSeats',
    description=""" Renew SM seats of a license. This will extend the license expiration date of managed SM devices covered by this license """,
    tags=['organization_license_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def renew_organization_licenses_seats(
    organization_id: str = Path(..., alias='organizationId'),
    body: OrganizationsOrganizationIdLicensesRenewSeatsPostRequest = ...,
):
    """
    Renew SM seats of a license
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/organizations/{organizationId}/licenses/{licenseId}',
    description=""" Display a license """,
    tags=['organization_license_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_organization_license(
    organization_id: str = Path(..., alias='organizationId'),
    license_id: str = Path(..., alias='licenseId'),
):
    """
    Display a license
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/organizations/{organizationId}/networks',
    description=""" List the networks in an organization """,
    tags=['organization_network_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_organization_networks(
    organization_id: str = Path(..., alias='organizationId'),
    config_template_id: Optional[str] = Query(None, alias='configTemplateId'),
):
    """
    List the networks in an organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/organizations/{organizationId}/networks',
    description=""" Create a network """,
    tags=['organization_network_management', 'network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def create_organization_network(
    organization_id: str = Path(..., alias='organizationId'),
    body: OrganizationsOrganizationIdNetworksPostRequest = ...,
):
    """
    Create a network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/organizations/{organizationId}/networks/combine',
    description=""" Combine multiple networks into a single network """,
    tags=['network_management', 'organization_network_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def combine_organization_networks(
    organization_id: str = Path(..., alias='organizationId'),
    body: OrganizationsOrganizationIdNetworksCombinePostRequest = ...,
):
    """
    Combine multiple networks into a single network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/organizations/{organizationId}/openapiSpec',
    description=""" Return the OpenAPI 2.0 Specification of the organization's API documentation in JSON """,
    tags=[
        'organization_management',
        'organization_api_requests',
        'organization_general_info',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_organization_openapi_spec(
    organization_id: str = Path(..., alias='organizationId')
):
    """
    Return the OpenAPI 2.0 Specification of the organization's API documentation in JSON
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/organizations/{organizationId}/samlRoles',
    description=""" List the SAML roles for this organization """,
    tags=['organization_saml_role_management', 'organization_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_organization_saml_roles(
    organization_id: str = Path(..., alias='organizationId')
):
    """
    List the SAML roles for this organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/organizations/{organizationId}/samlRoles',
    description=""" Create a SAML role """,
    tags=['organization_saml_role_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def create_organization_saml_role(
    organization_id: str = Path(..., alias='organizationId'),
    body: OrganizationsOrganizationIdSamlRolesPostRequest = ...,
):
    """
    Create a SAML role
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/organizations/{organizationId}/samlRoles/{samlRoleId}',
    description=""" Return a SAML role """,
    tags=['organization_saml_role_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_organization_saml_role(
    organization_id: str = Path(..., alias='organizationId'),
    saml_role_id: str = Path(..., alias='samlRoleId'),
):
    """
    Return a SAML role
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/organizations/{organizationId}/samlRoles/{samlRoleId}',
    description=""" Update a SAML role """,
    tags=['organization_saml_role_management', 'organization_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_organization_saml_role(
    organization_id: str = Path(..., alias='organizationId'),
    saml_role_id: str = Path(..., alias='samlRoleId'),
    body: OrganizationsOrganizationIdSamlRolesSamlRoleIdPutRequest = None,
):
    """
    Update a SAML role
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/organizations/{organizationId}/security/intrusionSettings',
    description=""" Returns all supported intrusion settings for an organization """,
    tags=['organization_security_settings'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_organization_security_intrusion_settings(
    organization_id: str = Path(..., alias='organizationId')
):
    """
    Returns all supported intrusion settings for an organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/organizations/{organizationId}/security/intrusionSettings',
    description=""" Sets supported intrusion settings for an organization """,
    tags=['security_settings_management', 'organization_security_settings'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_organization_security_intrusion_settings(
    organization_id: str = Path(..., alias='organizationId'),
    body: OrganizationsOrganizationIdSecurityIntrusionSettingsPutRequest = ...,
):
    """
    Sets supported intrusion settings for an organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/organizations/{organizationId}/securityEvents',
    description=""" List the security events (intrusion detection only) for an organization """,
    tags=['organization_security_settings', 'network_event_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_organization_security_events(
    organization_id: str = Path(..., alias='organizationId'),
    t0: Optional[str] = None,
    t1: Optional[str] = None,
    timespan: Optional[float] = None,
    per_page: Optional[int] = Query(None, alias='perPage'),
    starting_after: Optional[str] = Query(None, alias='startingAfter'),
    ending_before: Optional[str] = Query(None, alias='endingBefore'),
):
    """
    List the security events (intrusion detection only) for an organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/organizations/{organizationId}/snmp',
    description=""" Return the SNMP settings for an organization """,
    tags=['organization_snmp_configuration', 'organization_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_organization_snmp(organization_id: str = Path(..., alias='organizationId')):
    """
    Return the SNMP settings for an organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/organizations/{organizationId}/thirdPartyVPNPeers',
    description=""" Return the third party VPN peers for an organization """,
    tags=['organization_vpn_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_organization_third_party_v_p_n_peers(
    organization_id: str = Path(..., alias='organizationId')
):
    """
    Return the third party VPN peers for an organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/organizations/{organizationId}/thirdPartyVPNPeers',
    description=""" Update the third party VPN peers for an organization """,
    tags=['organization_vpn_management', 'vpn_management', 'organization_management'],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_organization_third_party_v_p_n_peers(
    organization_id: str = Path(..., alias='organizationId'),
    body: OrganizationsOrganizationIdThirdPartyVPNPeersPutRequest = ...,
):
    """
    Update the third party VPN peers for an organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/organizations/{organizationId}/uplinksLossAndLatency',
    description=""" Return the uplink loss and latency for every MX in the organization from at latest 2 minutes ago """,
    tags=[
        'network_latency_monitoring',
        'network_connectivity_stats',
        'organization_uplinks_monitoring',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_organization_uplinks_loss_and_latency(
    organization_id: str = Path(..., alias='organizationId'),
    t0: Optional[str] = None,
    t1: Optional[str] = None,
    timespan: Optional[float] = None,
    uplink: Optional[Uplink5] = None,
    ip: Optional[str] = None,
):
    """
    Return the uplink loss and latency for every MX in the organization from at latest 2 minutes ago
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/organizations/{organizationId}/vpnFirewallRules',
    description=""" Return the firewall rules for an organization's site-to-site VPN """,
    tags=[
        'organization_vpn_management',
        'firewall_management',
        'network_firewall_management',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def get_organization_vpn_firewall_rules(
    organization_id: str = Path(..., alias='organizationId')
):
    """
    Return the firewall rules for an organization's site-to-site VPN
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/organizations/{organizationId}/vpnFirewallRules',
    description=""" Update the firewall rules of an organization's site-to-site VPN """,
    tags=[
        'firewall_management',
        'network_firewall_management',
        'vpn_management',
        'organization_vpn_management',
    ],
    security=[
        APIKeyHeader(name="X-Cisco-Meraki-API-Key"),
    ],
)
def update_organization_vpn_firewall_rules(
    organization_id: str = Path(..., alias='organizationId'),
    body: OrganizationsOrganizationIdVpnFirewallRulesPutRequest = None,
):
    """
    Update the firewall rules of an organization's site-to-site VPN
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
